# coding: utf-8

"""
    Pdf4me

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_type': 'str',
        'message': 'str',
        'timestamp': 'datetime',
        'doc_log_level': 'str',
        'duration_milliseconds': 'int'
    }

    attribute_map = {
        'message_type': 'messageType',
        'message': 'message',
        'timestamp': 'timestamp',
        'doc_log_level': 'docLogLevel',
        'duration_milliseconds': 'durationMilliseconds'
    }

    def __init__(self, message_type=None, message=None, timestamp=None, doc_log_level=None, duration_milliseconds=None):  # noqa: E501
        """DocLog - a model defined in Swagger"""  # noqa: E501

        self._message_type = None
        self._message = None
        self._timestamp = None
        self._doc_log_level = None
        self._duration_milliseconds = None
        self.discriminator = None

        if message_type is not None:
            self.message_type = message_type
        if message is not None:
            self.message = message
        if timestamp is not None:
            self.timestamp = timestamp
        if doc_log_level is not None:
            self.doc_log_level = doc_log_level
        if duration_milliseconds is not None:
            self.duration_milliseconds = duration_milliseconds

    @property
    def message_type(self):
        """Gets the message_type of this DocLog.  # noqa: E501


        :return: The message_type of this DocLog.  # noqa: E501
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this DocLog.


        :param message_type: The message_type of this DocLog.  # noqa: E501
        :type: str
        """

        self._message_type = message_type

    @property
    def message(self):
        """Gets the message of this DocLog.  # noqa: E501


        :return: The message of this DocLog.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DocLog.


        :param message: The message of this DocLog.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def timestamp(self):
        """Gets the timestamp of this DocLog.  # noqa: E501


        :return: The timestamp of this DocLog.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DocLog.


        :param timestamp: The timestamp of this DocLog.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def doc_log_level(self):
        """Gets the doc_log_level of this DocLog.  # noqa: E501


        :return: The doc_log_level of this DocLog.  # noqa: E501
        :rtype: str
        """
        return self._doc_log_level

    @doc_log_level.setter
    def doc_log_level(self, doc_log_level):
        """Sets the doc_log_level of this DocLog.


        :param doc_log_level: The doc_log_level of this DocLog.  # noqa: E501
        :type: str
        """
        allowed_values = ["verbose", "info", "warning", "error", "timing"]  # noqa: E501
        if doc_log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `doc_log_level` ({0}), must be one of {1}"  # noqa: E501
                .format(doc_log_level, allowed_values)
            )

        self._doc_log_level = doc_log_level

    @property
    def duration_milliseconds(self):
        """Gets the duration_milliseconds of this DocLog.  # noqa: E501


        :return: The duration_milliseconds of this DocLog.  # noqa: E501
        :rtype: int
        """
        return self._duration_milliseconds

    @duration_milliseconds.setter
    def duration_milliseconds(self, duration_milliseconds):
        """Sets the duration_milliseconds of this DocLog.


        :param duration_milliseconds: The duration_milliseconds of this DocLog.  # noqa: E501
        :type: int
        """

        self._duration_milliseconds = duration_milliseconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
