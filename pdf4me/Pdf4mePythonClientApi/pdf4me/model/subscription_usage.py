# coding: utf-8

"""
    Pdf4me

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SubscriptionUsage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscription_id': 'str',
        'api_key': 'str',
        'total_api_cost': 'int',
        'current_api_cost': 'int',
        'sub_cost_total': 'int',
        'sub_cost_current': 'int',
        'api_call_counter': 'int',
        'active': 'bool'
    }

    attribute_map = {
        'subscription_id': 'subscriptionId',
        'api_key': 'apiKey',
        'total_api_cost': 'totalApiCost',
        'current_api_cost': 'currentApiCost',
        'sub_cost_total': 'subCostTotal',
        'sub_cost_current': 'subCostCurrent',
        'api_call_counter': 'apiCallCounter',
        'active': 'active'
    }

    def __init__(self, subscription_id=None, api_key=None, total_api_cost=None, current_api_cost=None, sub_cost_total=None, sub_cost_current=None, api_call_counter=None, active=None):  # noqa: E501
        """SubscriptionUsage - a model defined in Swagger"""  # noqa: E501

        self._subscription_id = None
        self._api_key = None
        self._total_api_cost = None
        self._current_api_cost = None
        self._sub_cost_total = None
        self._sub_cost_current = None
        self._api_call_counter = None
        self._active = None
        self.discriminator = None

        if subscription_id is not None:
            self.subscription_id = subscription_id
        if api_key is not None:
            self.api_key = api_key
        if total_api_cost is not None:
            self.total_api_cost = total_api_cost
        if current_api_cost is not None:
            self.current_api_cost = current_api_cost
        if sub_cost_total is not None:
            self.sub_cost_total = sub_cost_total
        if sub_cost_current is not None:
            self.sub_cost_current = sub_cost_current
        if api_call_counter is not None:
            self.api_call_counter = api_call_counter
        if active is not None:
            self.active = active

    @property
    def subscription_id(self):
        """Gets the subscription_id of this SubscriptionUsage.  # noqa: E501


        :return: The subscription_id of this SubscriptionUsage.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this SubscriptionUsage.


        :param subscription_id: The subscription_id of this SubscriptionUsage.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def api_key(self):
        """Gets the api_key of this SubscriptionUsage.  # noqa: E501


        :return: The api_key of this SubscriptionUsage.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this SubscriptionUsage.


        :param api_key: The api_key of this SubscriptionUsage.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def total_api_cost(self):
        """Gets the total_api_cost of this SubscriptionUsage.  # noqa: E501


        :return: The total_api_cost of this SubscriptionUsage.  # noqa: E501
        :rtype: int
        """
        return self._total_api_cost

    @total_api_cost.setter
    def total_api_cost(self, total_api_cost):
        """Sets the total_api_cost of this SubscriptionUsage.


        :param total_api_cost: The total_api_cost of this SubscriptionUsage.  # noqa: E501
        :type: int
        """

        self._total_api_cost = total_api_cost

    @property
    def current_api_cost(self):
        """Gets the current_api_cost of this SubscriptionUsage.  # noqa: E501


        :return: The current_api_cost of this SubscriptionUsage.  # noqa: E501
        :rtype: int
        """
        return self._current_api_cost

    @current_api_cost.setter
    def current_api_cost(self, current_api_cost):
        """Sets the current_api_cost of this SubscriptionUsage.


        :param current_api_cost: The current_api_cost of this SubscriptionUsage.  # noqa: E501
        :type: int
        """

        self._current_api_cost = current_api_cost

    @property
    def sub_cost_total(self):
        """Gets the sub_cost_total of this SubscriptionUsage.  # noqa: E501


        :return: The sub_cost_total of this SubscriptionUsage.  # noqa: E501
        :rtype: int
        """
        return self._sub_cost_total

    @sub_cost_total.setter
    def sub_cost_total(self, sub_cost_total):
        """Sets the sub_cost_total of this SubscriptionUsage.


        :param sub_cost_total: The sub_cost_total of this SubscriptionUsage.  # noqa: E501
        :type: int
        """

        self._sub_cost_total = sub_cost_total

    @property
    def sub_cost_current(self):
        """Gets the sub_cost_current of this SubscriptionUsage.  # noqa: E501


        :return: The sub_cost_current of this SubscriptionUsage.  # noqa: E501
        :rtype: int
        """
        return self._sub_cost_current

    @sub_cost_current.setter
    def sub_cost_current(self, sub_cost_current):
        """Sets the sub_cost_current of this SubscriptionUsage.


        :param sub_cost_current: The sub_cost_current of this SubscriptionUsage.  # noqa: E501
        :type: int
        """

        self._sub_cost_current = sub_cost_current

    @property
    def api_call_counter(self):
        """Gets the api_call_counter of this SubscriptionUsage.  # noqa: E501


        :return: The api_call_counter of this SubscriptionUsage.  # noqa: E501
        :rtype: int
        """
        return self._api_call_counter

    @api_call_counter.setter
    def api_call_counter(self, api_call_counter):
        """Sets the api_call_counter of this SubscriptionUsage.


        :param api_call_counter: The api_call_counter of this SubscriptionUsage.  # noqa: E501
        :type: int
        """

        self._api_call_counter = api_call_counter

    @property
    def active(self):
        """Gets the active of this SubscriptionUsage.  # noqa: E501


        :return: The active of this SubscriptionUsage.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this SubscriptionUsage.


        :param active: The active of this SubscriptionUsage.  # noqa: E501
        :type: bool
        """

        self._active = active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionUsage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
