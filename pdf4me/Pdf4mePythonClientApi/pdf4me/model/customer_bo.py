# coding: utf-8

"""
    Pdf4me

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomerBO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'str',
        'tenant_id': 'str',
        'subscription_id': 'str',
        'active': 'bool',
        'pdf4me_type': 'str',
        'vat': 'str',
        'country_code': 'str',
        'currency': 'str',
        'language': 'str',
        'company_name': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'street': 'str',
        'zip': 'str',
        'city': 'str',
        'ip_adr': 'str',
        'creation_date': 'datetime',
        'creation_name': 'str',
        'mod_date': 'datetime',
        'mod_name': 'str',
        'email': 'str',
        'charge_bee_customer_id': 'str',
        'validation_res': 'list[KeyValuePairStringString]'
    }

    attribute_map = {
        'customer_id': 'customerId',
        'tenant_id': 'tenantId',
        'subscription_id': 'subscriptionId',
        'active': 'active',
        'pdf4me_type': 'pdf4meType',
        'vat': 'vat',
        'country_code': 'countryCode',
        'currency': 'currency',
        'language': 'language',
        'company_name': 'companyName',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'street': 'street',
        'zip': 'zip',
        'city': 'city',
        'ip_adr': 'ipAdr',
        'creation_date': 'creationDate',
        'creation_name': 'creationName',
        'mod_date': 'modDate',
        'mod_name': 'modName',
        'email': 'email',
        'charge_bee_customer_id': 'chargeBeeCustomerId',
        'validation_res': 'validationRes'
    }

    def __init__(self, customer_id=None, tenant_id=None, subscription_id=None, active=None, pdf4me_type=None, vat=None, country_code=None, currency=None, language=None, company_name=None, first_name=None, last_name=None, street=None, zip=None, city=None, ip_adr=None, creation_date=None, creation_name=None, mod_date=None, mod_name=None, email=None, charge_bee_customer_id=None, validation_res=None):  # noqa: E501
        """CustomerBO - a model defined in Swagger"""  # noqa: E501

        self._customer_id = None
        self._tenant_id = None
        self._subscription_id = None
        self._active = None
        self._pdf4me_type = None
        self._vat = None
        self._country_code = None
        self._currency = None
        self._language = None
        self._company_name = None
        self._first_name = None
        self._last_name = None
        self._street = None
        self._zip = None
        self._city = None
        self._ip_adr = None
        self._creation_date = None
        self._creation_name = None
        self._mod_date = None
        self._mod_name = None
        self._email = None
        self._charge_bee_customer_id = None
        self._validation_res = None
        self.discriminator = None

        if customer_id is not None:
            self.customer_id = customer_id
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if active is not None:
            self.active = active
        if pdf4me_type is not None:
            self.pdf4me_type = pdf4me_type
        if vat is not None:
            self.vat = vat
        if country_code is not None:
            self.country_code = country_code
        if currency is not None:
            self.currency = currency
        if language is not None:
            self.language = language
        if company_name is not None:
            self.company_name = company_name
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if street is not None:
            self.street = street
        if zip is not None:
            self.zip = zip
        if city is not None:
            self.city = city
        if ip_adr is not None:
            self.ip_adr = ip_adr
        if creation_date is not None:
            self.creation_date = creation_date
        if creation_name is not None:
            self.creation_name = creation_name
        if mod_date is not None:
            self.mod_date = mod_date
        if mod_name is not None:
            self.mod_name = mod_name
        if email is not None:
            self.email = email
        if charge_bee_customer_id is not None:
            self.charge_bee_customer_id = charge_bee_customer_id
        if validation_res is not None:
            self.validation_res = validation_res

    @property
    def customer_id(self):
        """Gets the customer_id of this CustomerBO.  # noqa: E501


        :return: The customer_id of this CustomerBO.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CustomerBO.


        :param customer_id: The customer_id of this CustomerBO.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this CustomerBO.  # noqa: E501


        :return: The tenant_id of this CustomerBO.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this CustomerBO.


        :param tenant_id: The tenant_id of this CustomerBO.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this CustomerBO.  # noqa: E501


        :return: The subscription_id of this CustomerBO.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this CustomerBO.


        :param subscription_id: The subscription_id of this CustomerBO.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def active(self):
        """Gets the active of this CustomerBO.  # noqa: E501


        :return: The active of this CustomerBO.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CustomerBO.


        :param active: The active of this CustomerBO.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def pdf4me_type(self):
        """Gets the pdf4me_type of this CustomerBO.  # noqa: E501


        :return: The pdf4me_type of this CustomerBO.  # noqa: E501
        :rtype: str
        """
        return self._pdf4me_type

    @pdf4me_type.setter
    def pdf4me_type(self, pdf4me_type):
        """Sets the pdf4me_type of this CustomerBO.


        :param pdf4me_type: The pdf4me_type of this CustomerBO.  # noqa: E501
        :type: str
        """
        allowed_values = ["undef", "api", "consumer"]  # noqa: E501
        if pdf4me_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pdf4me_type` ({0}), must be one of {1}"  # noqa: E501
                .format(pdf4me_type, allowed_values)
            )

        self._pdf4me_type = pdf4me_type

    @property
    def vat(self):
        """Gets the vat of this CustomerBO.  # noqa: E501


        :return: The vat of this CustomerBO.  # noqa: E501
        :rtype: str
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this CustomerBO.


        :param vat: The vat of this CustomerBO.  # noqa: E501
        :type: str
        """

        self._vat = vat

    @property
    def country_code(self):
        """Gets the country_code of this CustomerBO.  # noqa: E501


        :return: The country_code of this CustomerBO.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this CustomerBO.


        :param country_code: The country_code of this CustomerBO.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def currency(self):
        """Gets the currency of this CustomerBO.  # noqa: E501


        :return: The currency of this CustomerBO.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CustomerBO.


        :param currency: The currency of this CustomerBO.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def language(self):
        """Gets the language of this CustomerBO.  # noqa: E501


        :return: The language of this CustomerBO.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CustomerBO.


        :param language: The language of this CustomerBO.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def company_name(self):
        """Gets the company_name of this CustomerBO.  # noqa: E501


        :return: The company_name of this CustomerBO.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this CustomerBO.


        :param company_name: The company_name of this CustomerBO.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def first_name(self):
        """Gets the first_name of this CustomerBO.  # noqa: E501


        :return: The first_name of this CustomerBO.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CustomerBO.


        :param first_name: The first_name of this CustomerBO.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this CustomerBO.  # noqa: E501


        :return: The last_name of this CustomerBO.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CustomerBO.


        :param last_name: The last_name of this CustomerBO.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def street(self):
        """Gets the street of this CustomerBO.  # noqa: E501


        :return: The street of this CustomerBO.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this CustomerBO.


        :param street: The street of this CustomerBO.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def zip(self):
        """Gets the zip of this CustomerBO.  # noqa: E501


        :return: The zip of this CustomerBO.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this CustomerBO.


        :param zip: The zip of this CustomerBO.  # noqa: E501
        :type: str
        """

        self._zip = zip

    @property
    def city(self):
        """Gets the city of this CustomerBO.  # noqa: E501


        :return: The city of this CustomerBO.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CustomerBO.


        :param city: The city of this CustomerBO.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def ip_adr(self):
        """Gets the ip_adr of this CustomerBO.  # noqa: E501


        :return: The ip_adr of this CustomerBO.  # noqa: E501
        :rtype: str
        """
        return self._ip_adr

    @ip_adr.setter
    def ip_adr(self, ip_adr):
        """Sets the ip_adr of this CustomerBO.


        :param ip_adr: The ip_adr of this CustomerBO.  # noqa: E501
        :type: str
        """

        self._ip_adr = ip_adr

    @property
    def creation_date(self):
        """Gets the creation_date of this CustomerBO.  # noqa: E501


        :return: The creation_date of this CustomerBO.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this CustomerBO.


        :param creation_date: The creation_date of this CustomerBO.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def creation_name(self):
        """Gets the creation_name of this CustomerBO.  # noqa: E501


        :return: The creation_name of this CustomerBO.  # noqa: E501
        :rtype: str
        """
        return self._creation_name

    @creation_name.setter
    def creation_name(self, creation_name):
        """Sets the creation_name of this CustomerBO.


        :param creation_name: The creation_name of this CustomerBO.  # noqa: E501
        :type: str
        """

        self._creation_name = creation_name

    @property
    def mod_date(self):
        """Gets the mod_date of this CustomerBO.  # noqa: E501


        :return: The mod_date of this CustomerBO.  # noqa: E501
        :rtype: datetime
        """
        return self._mod_date

    @mod_date.setter
    def mod_date(self, mod_date):
        """Sets the mod_date of this CustomerBO.


        :param mod_date: The mod_date of this CustomerBO.  # noqa: E501
        :type: datetime
        """

        self._mod_date = mod_date

    @property
    def mod_name(self):
        """Gets the mod_name of this CustomerBO.  # noqa: E501


        :return: The mod_name of this CustomerBO.  # noqa: E501
        :rtype: str
        """
        return self._mod_name

    @mod_name.setter
    def mod_name(self, mod_name):
        """Sets the mod_name of this CustomerBO.


        :param mod_name: The mod_name of this CustomerBO.  # noqa: E501
        :type: str
        """

        self._mod_name = mod_name

    @property
    def email(self):
        """Gets the email of this CustomerBO.  # noqa: E501


        :return: The email of this CustomerBO.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomerBO.


        :param email: The email of this CustomerBO.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def charge_bee_customer_id(self):
        """Gets the charge_bee_customer_id of this CustomerBO.  # noqa: E501


        :return: The charge_bee_customer_id of this CustomerBO.  # noqa: E501
        :rtype: str
        """
        return self._charge_bee_customer_id

    @charge_bee_customer_id.setter
    def charge_bee_customer_id(self, charge_bee_customer_id):
        """Sets the charge_bee_customer_id of this CustomerBO.


        :param charge_bee_customer_id: The charge_bee_customer_id of this CustomerBO.  # noqa: E501
        :type: str
        """

        self._charge_bee_customer_id = charge_bee_customer_id

    @property
    def validation_res(self):
        """Gets the validation_res of this CustomerBO.  # noqa: E501


        :return: The validation_res of this CustomerBO.  # noqa: E501
        :rtype: list[KeyValuePairStringString]
        """
        return self._validation_res

    @validation_res.setter
    def validation_res(self, validation_res):
        """Sets the validation_res of this CustomerBO.


        :param validation_res: The validation_res of this CustomerBO.  # noqa: E501
        :type: list[KeyValuePairStringString]
        """

        self._validation_res = validation_res

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerBO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerBO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
