# coding: utf-8

"""
    Pdf4me

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pdf4me.model.key_value_pair_string_string import KeyValuePairStringString  # noqa: F401,E501
from pdf4me.model.signature_config import SignatureConfig  # noqa: F401,E501
from pdf4me.model.stamp_action import StampAction  # noqa: F401,E501


class ArchiveConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'archive_metadata': 'list[KeyValuePairStringString]',
        'stamp_action': 'StampAction',
        'signature_config': 'SignatureConfig',
        'use_tsa': 'bool'
    }

    attribute_map = {
        'archive_metadata': 'archiveMetadata',
        'stamp_action': 'stampAction',
        'signature_config': 'signatureConfig',
        'use_tsa': 'useTSA'
    }

    def __init__(self, archive_metadata=None, stamp_action=None, signature_config=None, use_tsa=None):  # noqa: E501
        """ArchiveConfig - a model defined in Swagger"""  # noqa: E501

        self._archive_metadata = None
        self._stamp_action = None
        self._signature_config = None
        self._use_tsa = None
        self.discriminator = None

        self.archive_metadata = archive_metadata
        if stamp_action is not None:
            self.stamp_action = stamp_action
        if signature_config is not None:
            self.signature_config = signature_config
        if use_tsa is not None:
            self.use_tsa = use_tsa

    @property
    def archive_metadata(self):
        """Gets the archive_metadata of this ArchiveConfig.  # noqa: E501

        Give the documents metadata for archiving.  # noqa: E501

        :return: The archive_metadata of this ArchiveConfig.  # noqa: E501
        :rtype: list[KeyValuePairStringString]
        """
        return self._archive_metadata

    @archive_metadata.setter
    def archive_metadata(self, archive_metadata):
        """Sets the archive_metadata of this ArchiveConfig.

        Give the documents metadata for archiving.  # noqa: E501

        :param archive_metadata: The archive_metadata of this ArchiveConfig.  # noqa: E501
        :type: list[KeyValuePairStringString]
        """
        if archive_metadata is None:
            raise ValueError("Invalid value for `archive_metadata`, must not be `None`")  # noqa: E501

        self._archive_metadata = archive_metadata

    @property
    def stamp_action(self):
        """Gets the stamp_action of this ArchiveConfig.  # noqa: E501

        Place a signature stamp on to the document.  # noqa: E501

        :return: The stamp_action of this ArchiveConfig.  # noqa: E501
        :rtype: StampAction
        """
        return self._stamp_action

    @stamp_action.setter
    def stamp_action(self, stamp_action):
        """Sets the stamp_action of this ArchiveConfig.

        Place a signature stamp on to the document.  # noqa: E501

        :param stamp_action: The stamp_action of this ArchiveConfig.  # noqa: E501
        :type: StampAction
        """

        self._stamp_action = stamp_action

    @property
    def signature_config(self):
        """Gets the signature_config of this ArchiveConfig.  # noqa: E501

        Give your Signature Configure to get the electronical Identity.  # noqa: E501

        :return: The signature_config of this ArchiveConfig.  # noqa: E501
        :rtype: SignatureConfig
        """
        return self._signature_config

    @signature_config.setter
    def signature_config(self, signature_config):
        """Sets the signature_config of this ArchiveConfig.

        Give your Signature Configure to get the electronical Identity.  # noqa: E501

        :param signature_config: The signature_config of this ArchiveConfig.  # noqa: E501
        :type: SignatureConfig
        """

        self._signature_config = signature_config

    @property
    def use_tsa(self):
        """Gets the use_tsa of this ArchiveConfig.  # noqa: E501

        To guarantee the time of change use a Time Stamp Service.  # noqa: E501

        :return: The use_tsa of this ArchiveConfig.  # noqa: E501
        :rtype: bool
        """
        return self._use_tsa

    @use_tsa.setter
    def use_tsa(self, use_tsa):
        """Sets the use_tsa of this ArchiveConfig.

        To guarantee the time of change use a Time Stamp Service.  # noqa: E501

        :param use_tsa: The use_tsa of this ArchiveConfig.  # noqa: E501
        :type: bool
        """

        self._use_tsa = use_tsa

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArchiveConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArchiveConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
