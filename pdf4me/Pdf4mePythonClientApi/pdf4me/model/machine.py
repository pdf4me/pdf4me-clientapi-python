# coding: utf-8

"""
    Pdf4me

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Machine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'enabled': 'bool',
        'machine_id_ext': 'str',
        'machine_name': 'str',
        'last_update': 'datetime'
    }

    attribute_map = {
        'active': 'active',
        'enabled': 'enabled',
        'machine_id_ext': 'machineIdExt',
        'machine_name': 'machineName',
        'last_update': 'lastUpdate'
    }

    def __init__(self, active=None, enabled=None, machine_id_ext=None, machine_name=None, last_update=None):  # noqa: E501
        """Machine - a model defined in Swagger"""  # noqa: E501

        self._active = None
        self._enabled = None
        self._machine_id_ext = None
        self._machine_name = None
        self._last_update = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if enabled is not None:
            self.enabled = enabled
        if machine_id_ext is not None:
            self.machine_id_ext = machine_id_ext
        if machine_name is not None:
            self.machine_name = machine_name
        if last_update is not None:
            self.last_update = last_update

    @property
    def active(self):
        """Gets the active of this Machine.  # noqa: E501


        :return: The active of this Machine.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Machine.


        :param active: The active of this Machine.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def enabled(self):
        """Gets the enabled of this Machine.  # noqa: E501


        :return: The enabled of this Machine.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Machine.


        :param enabled: The enabled of this Machine.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def machine_id_ext(self):
        """Gets the machine_id_ext of this Machine.  # noqa: E501


        :return: The machine_id_ext of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._machine_id_ext

    @machine_id_ext.setter
    def machine_id_ext(self, machine_id_ext):
        """Sets the machine_id_ext of this Machine.


        :param machine_id_ext: The machine_id_ext of this Machine.  # noqa: E501
        :type: str
        """

        self._machine_id_ext = machine_id_ext

    @property
    def machine_name(self):
        """Gets the machine_name of this Machine.  # noqa: E501


        :return: The machine_name of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._machine_name

    @machine_name.setter
    def machine_name(self, machine_name):
        """Sets the machine_name of this Machine.


        :param machine_name: The machine_name of this Machine.  # noqa: E501
        :type: str
        """

        self._machine_name = machine_name

    @property
    def last_update(self):
        """Gets the last_update of this Machine.  # noqa: E501


        :return: The last_update of this Machine.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Machine.


        :param last_update: The last_update of this Machine.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Machine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Machine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
