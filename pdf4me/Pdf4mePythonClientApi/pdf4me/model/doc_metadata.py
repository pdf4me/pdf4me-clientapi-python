# coding: utf-8

"""
    Pdf4me

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'subject': 'str',
        'page_count': 'int',
        'author': 'str',
        'creator': 'str',
        'producer': 'str',
        'creation_date': 'datetime',
        'mod_date': 'datetime',
        'size': 'int',
        'is_encrypted': 'bool',
        'is_linearized': 'bool',
        'pdf_compliance': 'str',
        'is_signed': 'bool',
        'document_id': 'str'
    }

    attribute_map = {
        'title': 'title',
        'subject': 'subject',
        'page_count': 'pageCount',
        'author': 'author',
        'creator': 'creator',
        'producer': 'producer',
        'creation_date': 'creationDate',
        'mod_date': 'modDate',
        'size': 'size',
        'is_encrypted': 'isEncrypted',
        'is_linearized': 'isLinearized',
        'pdf_compliance': 'pdfCompliance',
        'is_signed': 'isSigned',
        'document_id': 'documentId'
    }

    def __init__(self, title=None, subject=None, page_count=None, author=None, creator=None, producer=None, creation_date=None, mod_date=None, size=None, is_encrypted=None, is_linearized=None, pdf_compliance=None, is_signed=None, document_id=None):  # noqa: E501
        """DocMetadata - a model defined in Swagger"""  # noqa: E501

        self._title = None
        self._subject = None
        self._page_count = None
        self._author = None
        self._creator = None
        self._producer = None
        self._creation_date = None
        self._mod_date = None
        self._size = None
        self._is_encrypted = None
        self._is_linearized = None
        self._pdf_compliance = None
        self._is_signed = None
        self._document_id = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if subject is not None:
            self.subject = subject
        if page_count is not None:
            self.page_count = page_count
        if author is not None:
            self.author = author
        if creator is not None:
            self.creator = creator
        if producer is not None:
            self.producer = producer
        if creation_date is not None:
            self.creation_date = creation_date
        if mod_date is not None:
            self.mod_date = mod_date
        if size is not None:
            self.size = size
        if is_encrypted is not None:
            self.is_encrypted = is_encrypted
        if is_linearized is not None:
            self.is_linearized = is_linearized
        if pdf_compliance is not None:
            self.pdf_compliance = pdf_compliance
        if is_signed is not None:
            self.is_signed = is_signed
        if document_id is not None:
            self.document_id = document_id

    @property
    def title(self):
        """Gets the title of this DocMetadata.  # noqa: E501


        :return: The title of this DocMetadata.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DocMetadata.


        :param title: The title of this DocMetadata.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def subject(self):
        """Gets the subject of this DocMetadata.  # noqa: E501


        :return: The subject of this DocMetadata.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this DocMetadata.


        :param subject: The subject of this DocMetadata.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def page_count(self):
        """Gets the page_count of this DocMetadata.  # noqa: E501


        :return: The page_count of this DocMetadata.  # noqa: E501
        :rtype: int
        """
        return self._page_count

    @page_count.setter
    def page_count(self, page_count):
        """Sets the page_count of this DocMetadata.


        :param page_count: The page_count of this DocMetadata.  # noqa: E501
        :type: int
        """

        self._page_count = page_count

    @property
    def author(self):
        """Gets the author of this DocMetadata.  # noqa: E501


        :return: The author of this DocMetadata.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this DocMetadata.


        :param author: The author of this DocMetadata.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def creator(self):
        """Gets the creator of this DocMetadata.  # noqa: E501


        :return: The creator of this DocMetadata.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this DocMetadata.


        :param creator: The creator of this DocMetadata.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def producer(self):
        """Gets the producer of this DocMetadata.  # noqa: E501


        :return: The producer of this DocMetadata.  # noqa: E501
        :rtype: str
        """
        return self._producer

    @producer.setter
    def producer(self, producer):
        """Sets the producer of this DocMetadata.


        :param producer: The producer of this DocMetadata.  # noqa: E501
        :type: str
        """

        self._producer = producer

    @property
    def creation_date(self):
        """Gets the creation_date of this DocMetadata.  # noqa: E501


        :return: The creation_date of this DocMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this DocMetadata.


        :param creation_date: The creation_date of this DocMetadata.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def mod_date(self):
        """Gets the mod_date of this DocMetadata.  # noqa: E501


        :return: The mod_date of this DocMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._mod_date

    @mod_date.setter
    def mod_date(self, mod_date):
        """Sets the mod_date of this DocMetadata.


        :param mod_date: The mod_date of this DocMetadata.  # noqa: E501
        :type: datetime
        """

        self._mod_date = mod_date

    @property
    def size(self):
        """Gets the size of this DocMetadata.  # noqa: E501


        :return: The size of this DocMetadata.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DocMetadata.


        :param size: The size of this DocMetadata.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def is_encrypted(self):
        """Gets the is_encrypted of this DocMetadata.  # noqa: E501


        :return: The is_encrypted of this DocMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._is_encrypted

    @is_encrypted.setter
    def is_encrypted(self, is_encrypted):
        """Sets the is_encrypted of this DocMetadata.


        :param is_encrypted: The is_encrypted of this DocMetadata.  # noqa: E501
        :type: bool
        """

        self._is_encrypted = is_encrypted

    @property
    def is_linearized(self):
        """Gets the is_linearized of this DocMetadata.  # noqa: E501


        :return: The is_linearized of this DocMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._is_linearized

    @is_linearized.setter
    def is_linearized(self, is_linearized):
        """Sets the is_linearized of this DocMetadata.


        :param is_linearized: The is_linearized of this DocMetadata.  # noqa: E501
        :type: bool
        """

        self._is_linearized = is_linearized

    @property
    def pdf_compliance(self):
        """Gets the pdf_compliance of this DocMetadata.  # noqa: E501


        :return: The pdf_compliance of this DocMetadata.  # noqa: E501
        :rtype: str
        """
        return self._pdf_compliance

    @pdf_compliance.setter
    def pdf_compliance(self, pdf_compliance):
        """Sets the pdf_compliance of this DocMetadata.


        :param pdf_compliance: The pdf_compliance of this DocMetadata.  # noqa: E501
        :type: str
        """

        self._pdf_compliance = pdf_compliance

    @property
    def is_signed(self):
        """Gets the is_signed of this DocMetadata.  # noqa: E501


        :return: The is_signed of this DocMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._is_signed

    @is_signed.setter
    def is_signed(self, is_signed):
        """Sets the is_signed of this DocMetadata.


        :param is_signed: The is_signed of this DocMetadata.  # noqa: E501
        :type: bool
        """

        self._is_signed = is_signed

    @property
    def document_id(self):
        """Gets the document_id of this DocMetadata.  # noqa: E501


        :return: The document_id of this DocMetadata.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this DocMetadata.


        :param document_id: The document_id of this DocMetadata.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
