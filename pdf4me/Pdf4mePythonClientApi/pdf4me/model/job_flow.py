# coding: utf-8

"""
    Pdf4me

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JobFlow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_flow_id': 'str',
        'tenant_id': 'str',
        'subscription_id': 'str',
        'application_id': 'str',
        'name': 'str',
        'action_flow': 'ActionFlow',
        'job_flow_plans': 'list[JobFlowPlan]',
        'creation_date': 'datetime',
        'creation_name': 'str',
        'mod_date': 'datetime',
        'mod_name': 'str'
    }

    attribute_map = {
        'job_flow_id': 'jobFlowId',
        'tenant_id': 'tenantId',
        'subscription_id': 'subscriptionId',
        'application_id': 'applicationId',
        'name': 'name',
        'action_flow': 'actionFlow',
        'job_flow_plans': 'jobFlowPlans',
        'creation_date': 'creationDate',
        'creation_name': 'creationName',
        'mod_date': 'modDate',
        'mod_name': 'modName'
    }

    def __init__(self, job_flow_id=None, tenant_id=None, subscription_id=None, application_id=None, name=None, action_flow=None, job_flow_plans=None, creation_date=None, creation_name=None, mod_date=None, mod_name=None):  # noqa: E501
        """JobFlow - a model defined in Swagger"""  # noqa: E501

        self._job_flow_id = None
        self._tenant_id = None
        self._subscription_id = None
        self._application_id = None
        self._name = None
        self._action_flow = None
        self._job_flow_plans = None
        self._creation_date = None
        self._creation_name = None
        self._mod_date = None
        self._mod_name = None
        self.discriminator = None

        if job_flow_id is not None:
            self.job_flow_id = job_flow_id
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if application_id is not None:
            self.application_id = application_id
        if name is not None:
            self.name = name
        if action_flow is not None:
            self.action_flow = action_flow
        if job_flow_plans is not None:
            self.job_flow_plans = job_flow_plans
        if creation_date is not None:
            self.creation_date = creation_date
        if creation_name is not None:
            self.creation_name = creation_name
        if mod_date is not None:
            self.mod_date = mod_date
        if mod_name is not None:
            self.mod_name = mod_name

    @property
    def job_flow_id(self):
        """Gets the job_flow_id of this JobFlow.  # noqa: E501


        :return: The job_flow_id of this JobFlow.  # noqa: E501
        :rtype: str
        """
        return self._job_flow_id

    @job_flow_id.setter
    def job_flow_id(self, job_flow_id):
        """Sets the job_flow_id of this JobFlow.


        :param job_flow_id: The job_flow_id of this JobFlow.  # noqa: E501
        :type: str
        """

        self._job_flow_id = job_flow_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this JobFlow.  # noqa: E501


        :return: The tenant_id of this JobFlow.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this JobFlow.


        :param tenant_id: The tenant_id of this JobFlow.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this JobFlow.  # noqa: E501


        :return: The subscription_id of this JobFlow.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this JobFlow.


        :param subscription_id: The subscription_id of this JobFlow.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def application_id(self):
        """Gets the application_id of this JobFlow.  # noqa: E501


        :return: The application_id of this JobFlow.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this JobFlow.


        :param application_id: The application_id of this JobFlow.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def name(self):
        """Gets the name of this JobFlow.  # noqa: E501


        :return: The name of this JobFlow.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobFlow.


        :param name: The name of this JobFlow.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def action_flow(self):
        """Gets the action_flow of this JobFlow.  # noqa: E501


        :return: The action_flow of this JobFlow.  # noqa: E501
        :rtype: ActionFlow
        """
        return self._action_flow

    @action_flow.setter
    def action_flow(self, action_flow):
        """Sets the action_flow of this JobFlow.


        :param action_flow: The action_flow of this JobFlow.  # noqa: E501
        :type: ActionFlow
        """

        self._action_flow = action_flow

    @property
    def job_flow_plans(self):
        """Gets the job_flow_plans of this JobFlow.  # noqa: E501


        :return: The job_flow_plans of this JobFlow.  # noqa: E501
        :rtype: list[JobFlowPlan]
        """
        return self._job_flow_plans

    @job_flow_plans.setter
    def job_flow_plans(self, job_flow_plans):
        """Sets the job_flow_plans of this JobFlow.


        :param job_flow_plans: The job_flow_plans of this JobFlow.  # noqa: E501
        :type: list[JobFlowPlan]
        """

        self._job_flow_plans = job_flow_plans

    @property
    def creation_date(self):
        """Gets the creation_date of this JobFlow.  # noqa: E501


        :return: The creation_date of this JobFlow.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this JobFlow.


        :param creation_date: The creation_date of this JobFlow.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def creation_name(self):
        """Gets the creation_name of this JobFlow.  # noqa: E501


        :return: The creation_name of this JobFlow.  # noqa: E501
        :rtype: str
        """
        return self._creation_name

    @creation_name.setter
    def creation_name(self, creation_name):
        """Sets the creation_name of this JobFlow.


        :param creation_name: The creation_name of this JobFlow.  # noqa: E501
        :type: str
        """

        self._creation_name = creation_name

    @property
    def mod_date(self):
        """Gets the mod_date of this JobFlow.  # noqa: E501


        :return: The mod_date of this JobFlow.  # noqa: E501
        :rtype: datetime
        """
        return self._mod_date

    @mod_date.setter
    def mod_date(self, mod_date):
        """Sets the mod_date of this JobFlow.


        :param mod_date: The mod_date of this JobFlow.  # noqa: E501
        :type: datetime
        """

        self._mod_date = mod_date

    @property
    def mod_name(self):
        """Gets the mod_name of this JobFlow.  # noqa: E501


        :return: The mod_name of this JobFlow.  # noqa: E501
        :rtype: str
        """
        return self._mod_name

    @mod_name.setter
    def mod_name(self, mod_name):
        """Sets the mod_name of this JobFlow.


        :param mod_name: The mod_name of this JobFlow.  # noqa: E501
        :type: str
        """

        self._mod_name = mod_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobFlow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobFlow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
