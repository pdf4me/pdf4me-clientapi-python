# coding: utf-8

"""
    Pdf4me

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Text(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'position_x': 'int',
        'position_y': 'int',
        'align_x': 'str',
        'align_y': 'str',
        'format': 'bool',
        'size': 'int',
        'font': 'str',
        'color': 'Color',
        'font_encoding': 'str',
        'value': 'str',
        'mode': 'str',
        'rotate': 'RotateConfig',
        'translate': 'Translate',
        'transform': 'Transform',
        'underline': 'bool',
        'line_width': 'float'
    }

    attribute_map = {
        'position_x': 'positionX',
        'position_y': 'positionY',
        'align_x': 'alignX',
        'align_y': 'alignY',
        'format': 'format',
        'size': 'size',
        'font': 'font',
        'color': 'color',
        'font_encoding': 'fontEncoding',
        'value': 'value',
        'mode': 'mode',
        'rotate': 'rotate',
        'translate': 'translate',
        'transform': 'transform',
        'underline': 'underline',
        'line_width': 'lineWidth'
    }

    def __init__(self, position_x=None, position_y=None, align_x=None, align_y=None, format=None, size=None, font=None, color=None, font_encoding=None, value=None, mode=None, rotate=None, translate=None, transform=None, underline=None, line_width=None):  # noqa: E501
        """Text - a model defined in Swagger"""  # noqa: E501

        self._position_x = None
        self._position_y = None
        self._align_x = None
        self._align_y = None
        self._format = None
        self._size = None
        self._font = None
        self._color = None
        self._font_encoding = None
        self._value = None
        self._mode = None
        self._rotate = None
        self._translate = None
        self._transform = None
        self._underline = None
        self._line_width = None
        self.discriminator = None

        if position_x is not None:
            self.position_x = position_x
        if position_y is not None:
            self.position_y = position_y
        if align_x is not None:
            self.align_x = align_x
        if align_y is not None:
            self.align_y = align_y
        if format is not None:
            self.format = format
        if size is not None:
            self.size = size
        if font is not None:
            self.font = font
        if color is not None:
            self.color = color
        if font_encoding is not None:
            self.font_encoding = font_encoding
        self.value = value
        if mode is not None:
            self.mode = mode
        if rotate is not None:
            self.rotate = rotate
        if translate is not None:
            self.translate = translate
        if transform is not None:
            self.transform = transform
        if underline is not None:
            self.underline = underline
        if line_width is not None:
            self.line_width = line_width

    @property
    def position_x(self):
        """Gets the position_x of this Text.  # noqa: E501


        :return: The position_x of this Text.  # noqa: E501
        :rtype: int
        """
        return self._position_x

    @position_x.setter
    def position_x(self, position_x):
        """Sets the position_x of this Text.


        :param position_x: The position_x of this Text.  # noqa: E501
        :type: int
        """

        self._position_x = position_x

    @property
    def position_y(self):
        """Gets the position_y of this Text.  # noqa: E501


        :return: The position_y of this Text.  # noqa: E501
        :rtype: int
        """
        return self._position_y

    @position_y.setter
    def position_y(self, position_y):
        """Sets the position_y of this Text.


        :param position_y: The position_y of this Text.  # noqa: E501
        :type: int
        """

        self._position_y = position_y

    @property
    def align_x(self):
        """Gets the align_x of this Text.  # noqa: E501


        :return: The align_x of this Text.  # noqa: E501
        :rtype: str
        """
        return self._align_x

    @align_x.setter
    def align_x(self, align_x):
        """Sets the align_x of this Text.


        :param align_x: The align_x of this Text.  # noqa: E501
        :type: str
        """
        allowed_values = ["left", "center", "right"]  # noqa: E501
        if align_x not in allowed_values:
            raise ValueError(
                "Invalid value for `align_x` ({0}), must be one of {1}"  # noqa: E501
                .format(align_x, allowed_values)
            )

        self._align_x = align_x

    @property
    def align_y(self):
        """Gets the align_y of this Text.  # noqa: E501


        :return: The align_y of this Text.  # noqa: E501
        :rtype: str
        """
        return self._align_y

    @align_y.setter
    def align_y(self, align_y):
        """Sets the align_y of this Text.


        :param align_y: The align_y of this Text.  # noqa: E501
        :type: str
        """
        allowed_values = ["top", "middle", "bottom"]  # noqa: E501
        if align_y not in allowed_values:
            raise ValueError(
                "Invalid value for `align_y` ({0}), must be one of {1}"  # noqa: E501
                .format(align_y, allowed_values)
            )

        self._align_y = align_y

    @property
    def format(self):
        """Gets the format of this Text.  # noqa: E501


        :return: The format of this Text.  # noqa: E501
        :rtype: bool
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Text.


        :param format: The format of this Text.  # noqa: E501
        :type: bool
        """

        self._format = format

    @property
    def size(self):
        """Gets the size of this Text.  # noqa: E501

        The font size in points, e.g. 12. If set to 0, the size is chosen such that text fits stamp size (not allowed if operator is within transformation operator).  # noqa: E501

        :return: The size of this Text.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Text.

        The font size in points, e.g. 12. If set to 0, the size is chosen such that text fits stamp size (not allowed if operator is within transformation operator).  # noqa: E501

        :param size: The size of this Text.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def font(self):
        """Gets the font of this Text.  # noqa: E501


        :return: The font of this Text.  # noqa: E501
        :rtype: str
        """
        return self._font

    @font.setter
    def font(self, font):
        """Sets the font of this Text.


        :param font: The font of this Text.  # noqa: E501
        :type: str
        """

        self._font = font

    @property
    def color(self):
        """Gets the color of this Text.  # noqa: E501


        :return: The color of this Text.  # noqa: E501
        :rtype: Color
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Text.


        :param color: The color of this Text.  # noqa: E501
        :type: Color
        """

        self._color = color

    @property
    def font_encoding(self):
        """Gets the font_encoding of this Text.  # noqa: E501


        :return: The font_encoding of this Text.  # noqa: E501
        :rtype: str
        """
        return self._font_encoding

    @font_encoding.setter
    def font_encoding(self, font_encoding):
        """Sets the font_encoding of this Text.


        :param font_encoding: The font_encoding of this Text.  # noqa: E501
        :type: str
        """
        allowed_values = ["unicode", "winAnsi"]  # noqa: E501
        if font_encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `font_encoding` ({0}), must be one of {1}"  # noqa: E501
                .format(font_encoding, allowed_values)
            )

        self._font_encoding = font_encoding

    @property
    def value(self):
        """Gets the value of this Text.  # noqa: E501


        :return: The value of this Text.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Text.


        :param value: The value of this Text.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def mode(self):
        """Gets the mode of this Text.  # noqa: E501


        :return: The mode of this Text.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Text.


        :param mode: The mode of this Text.  # noqa: E501
        :type: str
        """
        allowed_values = ["fill", "stroke"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def rotate(self):
        """Gets the rotate of this Text.  # noqa: E501


        :return: The rotate of this Text.  # noqa: E501
        :rtype: RotateConfig
        """
        return self._rotate

    @rotate.setter
    def rotate(self, rotate):
        """Sets the rotate of this Text.


        :param rotate: The rotate of this Text.  # noqa: E501
        :type: RotateConfig
        """

        self._rotate = rotate

    @property
    def translate(self):
        """Gets the translate of this Text.  # noqa: E501


        :return: The translate of this Text.  # noqa: E501
        :rtype: Translate
        """
        return self._translate

    @translate.setter
    def translate(self, translate):
        """Sets the translate of this Text.


        :param translate: The translate of this Text.  # noqa: E501
        :type: Translate
        """

        self._translate = translate

    @property
    def transform(self):
        """Gets the transform of this Text.  # noqa: E501


        :return: The transform of this Text.  # noqa: E501
        :rtype: Transform
        """
        return self._transform

    @transform.setter
    def transform(self, transform):
        """Sets the transform of this Text.


        :param transform: The transform of this Text.  # noqa: E501
        :type: Transform
        """

        self._transform = transform

    @property
    def underline(self):
        """Gets the underline of this Text.  # noqa: E501


        :return: The underline of this Text.  # noqa: E501
        :rtype: bool
        """
        return self._underline

    @underline.setter
    def underline(self, underline):
        """Sets the underline of this Text.


        :param underline: The underline of this Text.  # noqa: E501
        :type: bool
        """

        self._underline = underline

    @property
    def line_width(self):
        """Gets the line_width of this Text.  # noqa: E501


        :return: The line_width of this Text.  # noqa: E501
        :rtype: float
        """
        return self._line_width

    @line_width.setter
    def line_width(self, line_width):
        """Sets the line_width of this Text.


        :param line_width: The line_width of this Text.  # noqa: E501
        :type: float
        """

        self._line_width = line_width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Text, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Text):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
