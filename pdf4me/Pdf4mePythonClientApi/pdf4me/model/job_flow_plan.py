# coding: utf-8

"""
    Pdf4me

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JobFlowPlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_flow_plan_id': 'str',
        'job_flow_id': 'str',
        'application_id': 'str',
        'enabled': 'bool',
        'active': 'bool',
        'user_id': 'str',
        'tenant_id': 'str',
        'source_folder': 'StorageFolder',
        'execution_trigger': 'ExecutionTrigger',
        'target_folder': 'StorageFolder',
        'machine_id': 'str'
    }

    attribute_map = {
        'job_flow_plan_id': 'jobFlowPlanId',
        'job_flow_id': 'jobFlowId',
        'application_id': 'applicationId',
        'enabled': 'enabled',
        'active': 'active',
        'user_id': 'userId',
        'tenant_id': 'tenantId',
        'source_folder': 'sourceFolder',
        'execution_trigger': 'executionTrigger',
        'target_folder': 'targetFolder',
        'machine_id': 'machineId'
    }

    def __init__(self, job_flow_plan_id=None, job_flow_id=None, application_id=None, enabled=None, active=None, user_id=None, tenant_id=None, source_folder=None, execution_trigger=None, target_folder=None, machine_id=None):  # noqa: E501
        """JobFlowPlan - a model defined in Swagger"""  # noqa: E501

        self._job_flow_plan_id = None
        self._job_flow_id = None
        self._application_id = None
        self._enabled = None
        self._active = None
        self._user_id = None
        self._tenant_id = None
        self._source_folder = None
        self._execution_trigger = None
        self._target_folder = None
        self._machine_id = None
        self.discriminator = None

        if job_flow_plan_id is not None:
            self.job_flow_plan_id = job_flow_plan_id
        if job_flow_id is not None:
            self.job_flow_id = job_flow_id
        if application_id is not None:
            self.application_id = application_id
        if enabled is not None:
            self.enabled = enabled
        if active is not None:
            self.active = active
        if user_id is not None:
            self.user_id = user_id
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if source_folder is not None:
            self.source_folder = source_folder
        if execution_trigger is not None:
            self.execution_trigger = execution_trigger
        if target_folder is not None:
            self.target_folder = target_folder
        if machine_id is not None:
            self.machine_id = machine_id

    @property
    def job_flow_plan_id(self):
        """Gets the job_flow_plan_id of this JobFlowPlan.  # noqa: E501


        :return: The job_flow_plan_id of this JobFlowPlan.  # noqa: E501
        :rtype: str
        """
        return self._job_flow_plan_id

    @job_flow_plan_id.setter
    def job_flow_plan_id(self, job_flow_plan_id):
        """Sets the job_flow_plan_id of this JobFlowPlan.


        :param job_flow_plan_id: The job_flow_plan_id of this JobFlowPlan.  # noqa: E501
        :type: str
        """

        self._job_flow_plan_id = job_flow_plan_id

    @property
    def job_flow_id(self):
        """Gets the job_flow_id of this JobFlowPlan.  # noqa: E501


        :return: The job_flow_id of this JobFlowPlan.  # noqa: E501
        :rtype: str
        """
        return self._job_flow_id

    @job_flow_id.setter
    def job_flow_id(self, job_flow_id):
        """Sets the job_flow_id of this JobFlowPlan.


        :param job_flow_id: The job_flow_id of this JobFlowPlan.  # noqa: E501
        :type: str
        """

        self._job_flow_id = job_flow_id

    @property
    def application_id(self):
        """Gets the application_id of this JobFlowPlan.  # noqa: E501


        :return: The application_id of this JobFlowPlan.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this JobFlowPlan.


        :param application_id: The application_id of this JobFlowPlan.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def enabled(self):
        """Gets the enabled of this JobFlowPlan.  # noqa: E501


        :return: The enabled of this JobFlowPlan.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this JobFlowPlan.


        :param enabled: The enabled of this JobFlowPlan.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def active(self):
        """Gets the active of this JobFlowPlan.  # noqa: E501


        :return: The active of this JobFlowPlan.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this JobFlowPlan.


        :param active: The active of this JobFlowPlan.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def user_id(self):
        """Gets the user_id of this JobFlowPlan.  # noqa: E501


        :return: The user_id of this JobFlowPlan.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this JobFlowPlan.


        :param user_id: The user_id of this JobFlowPlan.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this JobFlowPlan.  # noqa: E501


        :return: The tenant_id of this JobFlowPlan.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this JobFlowPlan.


        :param tenant_id: The tenant_id of this JobFlowPlan.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def source_folder(self):
        """Gets the source_folder of this JobFlowPlan.  # noqa: E501


        :return: The source_folder of this JobFlowPlan.  # noqa: E501
        :rtype: StorageFolder
        """
        return self._source_folder

    @source_folder.setter
    def source_folder(self, source_folder):
        """Sets the source_folder of this JobFlowPlan.


        :param source_folder: The source_folder of this JobFlowPlan.  # noqa: E501
        :type: StorageFolder
        """

        self._source_folder = source_folder

    @property
    def execution_trigger(self):
        """Gets the execution_trigger of this JobFlowPlan.  # noqa: E501


        :return: The execution_trigger of this JobFlowPlan.  # noqa: E501
        :rtype: ExecutionTrigger
        """
        return self._execution_trigger

    @execution_trigger.setter
    def execution_trigger(self, execution_trigger):
        """Sets the execution_trigger of this JobFlowPlan.


        :param execution_trigger: The execution_trigger of this JobFlowPlan.  # noqa: E501
        :type: ExecutionTrigger
        """

        self._execution_trigger = execution_trigger

    @property
    def target_folder(self):
        """Gets the target_folder of this JobFlowPlan.  # noqa: E501


        :return: The target_folder of this JobFlowPlan.  # noqa: E501
        :rtype: StorageFolder
        """
        return self._target_folder

    @target_folder.setter
    def target_folder(self, target_folder):
        """Sets the target_folder of this JobFlowPlan.


        :param target_folder: The target_folder of this JobFlowPlan.  # noqa: E501
        :type: StorageFolder
        """

        self._target_folder = target_folder

    @property
    def machine_id(self):
        """Gets the machine_id of this JobFlowPlan.  # noqa: E501


        :return: The machine_id of this JobFlowPlan.  # noqa: E501
        :rtype: str
        """
        return self._machine_id

    @machine_id.setter
    def machine_id(self, machine_id):
        """Sets the machine_id of this JobFlowPlan.


        :param machine_id: The machine_id of this JobFlowPlan.  # noqa: E501
        :type: str
        """

        self._machine_id = machine_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobFlowPlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobFlowPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
