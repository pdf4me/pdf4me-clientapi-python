# coding: utf-8

"""
    Pdf4me

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MailMergeDocAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_print': 'bool',
        'print_package': 'str',
        'envelope_delivery': 'str',
        'envelope_type': 'str',
        'print_pool': 'str',
        'country': 'str',
        'receiver_id': 'str',
        'action_id': 'str'
    }

    attribute_map = {
        '_print': 'print',
        'print_package': 'printPackage',
        'envelope_delivery': 'envelopeDelivery',
        'envelope_type': 'envelopeType',
        'print_pool': 'printPool',
        'country': 'country',
        'receiver_id': 'receiverId',
        'action_id': 'actionId'
    }

    def __init__(self, _print=None, print_package=None, envelope_delivery=None, envelope_type=None, print_pool=None, country=None, receiver_id=None, action_id=None):  # noqa: E501
        """MailMergeDocAction - a model defined in Swagger"""  # noqa: E501

        self.__print = None
        self._print_package = None
        self._envelope_delivery = None
        self._envelope_type = None
        self._print_pool = None
        self._country = None
        self._receiver_id = None
        self._action_id = None
        self.discriminator = None

        if _print is not None:
            self._print = _print
        if print_package is not None:
            self.print_package = print_package
        if envelope_delivery is not None:
            self.envelope_delivery = envelope_delivery
        if envelope_type is not None:
            self.envelope_type = envelope_type
        if print_pool is not None:
            self.print_pool = print_pool
        if country is not None:
            self.country = country
        if receiver_id is not None:
            self.receiver_id = receiver_id
        if action_id is not None:
            self.action_id = action_id

    @property
    def _print(self):
        """Gets the _print of this MailMergeDocAction.  # noqa: E501


        :return: The _print of this MailMergeDocAction.  # noqa: E501
        :rtype: bool
        """
        return self.__print

    @_print.setter
    def _print(self, _print):
        """Sets the _print of this MailMergeDocAction.


        :param _print: The _print of this MailMergeDocAction.  # noqa: E501
        :type: bool
        """

        self.__print = _print

    @property
    def print_package(self):
        """Gets the print_package of this MailMergeDocAction.  # noqa: E501


        :return: The print_package of this MailMergeDocAction.  # noqa: E501
        :rtype: str
        """
        return self._print_package

    @print_package.setter
    def print_package(self, print_package):
        """Sets the print_package of this MailMergeDocAction.


        :param print_package: The print_package of this MailMergeDocAction.  # noqa: E501
        :type: str
        """

        self._print_package = print_package

    @property
    def envelope_delivery(self):
        """Gets the envelope_delivery of this MailMergeDocAction.  # noqa: E501


        :return: The envelope_delivery of this MailMergeDocAction.  # noqa: E501
        :rtype: str
        """
        return self._envelope_delivery

    @envelope_delivery.setter
    def envelope_delivery(self, envelope_delivery):
        """Sets the envelope_delivery of this MailMergeDocAction.


        :param envelope_delivery: The envelope_delivery of this MailMergeDocAction.  # noqa: E501
        :type: str
        """

        self._envelope_delivery = envelope_delivery

    @property
    def envelope_type(self):
        """Gets the envelope_type of this MailMergeDocAction.  # noqa: E501


        :return: The envelope_type of this MailMergeDocAction.  # noqa: E501
        :rtype: str
        """
        return self._envelope_type

    @envelope_type.setter
    def envelope_type(self, envelope_type):
        """Sets the envelope_type of this MailMergeDocAction.


        :param envelope_type: The envelope_type of this MailMergeDocAction.  # noqa: E501
        :type: str
        """

        self._envelope_type = envelope_type

    @property
    def print_pool(self):
        """Gets the print_pool of this MailMergeDocAction.  # noqa: E501


        :return: The print_pool of this MailMergeDocAction.  # noqa: E501
        :rtype: str
        """
        return self._print_pool

    @print_pool.setter
    def print_pool(self, print_pool):
        """Sets the print_pool of this MailMergeDocAction.


        :param print_pool: The print_pool of this MailMergeDocAction.  # noqa: E501
        :type: str
        """

        self._print_pool = print_pool

    @property
    def country(self):
        """Gets the country of this MailMergeDocAction.  # noqa: E501


        :return: The country of this MailMergeDocAction.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this MailMergeDocAction.


        :param country: The country of this MailMergeDocAction.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def receiver_id(self):
        """Gets the receiver_id of this MailMergeDocAction.  # noqa: E501


        :return: The receiver_id of this MailMergeDocAction.  # noqa: E501
        :rtype: str
        """
        return self._receiver_id

    @receiver_id.setter
    def receiver_id(self, receiver_id):
        """Sets the receiver_id of this MailMergeDocAction.


        :param receiver_id: The receiver_id of this MailMergeDocAction.  # noqa: E501
        :type: str
        """

        self._receiver_id = receiver_id

    @property
    def action_id(self):
        """Gets the action_id of this MailMergeDocAction.  # noqa: E501


        :return: The action_id of this MailMergeDocAction.  # noqa: E501
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this MailMergeDocAction.


        :param action_id: The action_id of this MailMergeDocAction.  # noqa: E501
        :type: str
        """

        self._action_id = action_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MailMergeDocAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MailMergeDocAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
