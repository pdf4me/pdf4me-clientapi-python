# coding: utf-8

"""
    Pdf4me

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DropDocumentReq(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notification': 'Notification',
        'document_id': 'str',
        'user_id': 'str',
        'url': 'str',
        'document': 'str',
        'file_name': 'str',
        'cloud_storage_provider': 'str',
        'cloud_storage_files': 'list[str]',
        'cloud_storage_files_desc': 'str',
        'tenant_id': 'str',
        'subscription_id': 'str',
        'trace_id': 'str',
        'request_id': 'str',
        'integration_setting': 'IntegrationSetting',
        'job_id': 'str',
        'job_id_ext': 'str',
        'documents': 'list[Pdf4meDocument]',
        'without_metadata': 'bool'
    }

    attribute_map = {
        'notification': 'notification',
        'document_id': 'documentId',
        'user_id': 'userId',
        'url': 'url',
        'document': 'document',
        'file_name': 'fileName',
        'cloud_storage_provider': 'cloudStorageProvider',
        'cloud_storage_files': 'cloudStorageFiles',
        'cloud_storage_files_desc': 'cloudStorageFilesDesc',
        'tenant_id': 'tenantId',
        'subscription_id': 'subscriptionId',
        'trace_id': 'traceId',
        'request_id': 'requestId',
        'integration_setting': 'integrationSetting',
        'job_id': 'jobId',
        'job_id_ext': 'jobIdExt',
        'documents': 'documents',
        'without_metadata': 'withoutMetadata'
    }

    def __init__(self, notification=None, document_id=None, user_id=None, url=None, document=None, file_name=None, cloud_storage_provider=None, cloud_storage_files=None, cloud_storage_files_desc=None, tenant_id=None, subscription_id=None, trace_id=None, request_id=None, integration_setting=None, job_id=None, job_id_ext=None, documents=None, without_metadata=None):  # noqa: E501
        """DropDocumentReq - a model defined in Swagger"""  # noqa: E501

        self._notification = None
        self._document_id = None
        self._user_id = None
        self._url = None
        self._document = None
        self._file_name = None
        self._cloud_storage_provider = None
        self._cloud_storage_files = None
        self._cloud_storage_files_desc = None
        self._tenant_id = None
        self._subscription_id = None
        self._trace_id = None
        self._request_id = None
        self._integration_setting = None
        self._job_id = None
        self._job_id_ext = None
        self._documents = None
        self._without_metadata = None
        self.discriminator = None

        if notification is not None:
            self.notification = notification
        if document_id is not None:
            self.document_id = document_id
        if user_id is not None:
            self.user_id = user_id
        if url is not None:
            self.url = url
        if document is not None:
            self.document = document
        if file_name is not None:
            self.file_name = file_name
        if cloud_storage_provider is not None:
            self.cloud_storage_provider = cloud_storage_provider
        if cloud_storage_files is not None:
            self.cloud_storage_files = cloud_storage_files
        if cloud_storage_files_desc is not None:
            self.cloud_storage_files_desc = cloud_storage_files_desc
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if trace_id is not None:
            self.trace_id = trace_id
        if request_id is not None:
            self.request_id = request_id
        if integration_setting is not None:
            self.integration_setting = integration_setting
        if job_id is not None:
            self.job_id = job_id
        if job_id_ext is not None:
            self.job_id_ext = job_id_ext
        if documents is not None:
            self.documents = documents
        if without_metadata is not None:
            self.without_metadata = without_metadata

    @property
    def notification(self):
        """Gets the notification of this DropDocumentReq.  # noqa: E501


        :return: The notification of this DropDocumentReq.  # noqa: E501
        :rtype: Notification
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this DropDocumentReq.


        :param notification: The notification of this DropDocumentReq.  # noqa: E501
        :type: Notification
        """

        self._notification = notification

    @property
    def document_id(self):
        """Gets the document_id of this DropDocumentReq.  # noqa: E501


        :return: The document_id of this DropDocumentReq.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this DropDocumentReq.


        :param document_id: The document_id of this DropDocumentReq.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def user_id(self):
        """Gets the user_id of this DropDocumentReq.  # noqa: E501


        :return: The user_id of this DropDocumentReq.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DropDocumentReq.


        :param user_id: The user_id of this DropDocumentReq.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def url(self):
        """Gets the url of this DropDocumentReq.  # noqa: E501


        :return: The url of this DropDocumentReq.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DropDocumentReq.


        :param url: The url of this DropDocumentReq.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def document(self):
        """Gets the document of this DropDocumentReq.  # noqa: E501


        :return: The document of this DropDocumentReq.  # noqa: E501
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this DropDocumentReq.


        :param document: The document of this DropDocumentReq.  # noqa: E501
        :type: str
        """
        if document is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', document):  # noqa: E501
            raise ValueError(r"Invalid value for `document`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._document = document

    @property
    def file_name(self):
        """Gets the file_name of this DropDocumentReq.  # noqa: E501


        :return: The file_name of this DropDocumentReq.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this DropDocumentReq.


        :param file_name: The file_name of this DropDocumentReq.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def cloud_storage_provider(self):
        """Gets the cloud_storage_provider of this DropDocumentReq.  # noqa: E501


        :return: The cloud_storage_provider of this DropDocumentReq.  # noqa: E501
        :rtype: str
        """
        return self._cloud_storage_provider

    @cloud_storage_provider.setter
    def cloud_storage_provider(self, cloud_storage_provider):
        """Sets the cloud_storage_provider of this DropDocumentReq.


        :param cloud_storage_provider: The cloud_storage_provider of this DropDocumentReq.  # noqa: E501
        :type: str
        """
        allowed_values = ["undef", "local", "url", "oneDrive", "dropbox", "googleDrive", "kloudless"]  # noqa: E501
        if cloud_storage_provider not in allowed_values:
            raise ValueError(
                "Invalid value for `cloud_storage_provider` ({0}), must be one of {1}"  # noqa: E501
                .format(cloud_storage_provider, allowed_values)
            )

        self._cloud_storage_provider = cloud_storage_provider

    @property
    def cloud_storage_files(self):
        """Gets the cloud_storage_files of this DropDocumentReq.  # noqa: E501


        :return: The cloud_storage_files of this DropDocumentReq.  # noqa: E501
        :rtype: list[str]
        """
        return self._cloud_storage_files

    @cloud_storage_files.setter
    def cloud_storage_files(self, cloud_storage_files):
        """Sets the cloud_storage_files of this DropDocumentReq.


        :param cloud_storage_files: The cloud_storage_files of this DropDocumentReq.  # noqa: E501
        :type: list[str]
        """

        self._cloud_storage_files = cloud_storage_files

    @property
    def cloud_storage_files_desc(self):
        """Gets the cloud_storage_files_desc of this DropDocumentReq.  # noqa: E501


        :return: The cloud_storage_files_desc of this DropDocumentReq.  # noqa: E501
        :rtype: str
        """
        return self._cloud_storage_files_desc

    @cloud_storage_files_desc.setter
    def cloud_storage_files_desc(self, cloud_storage_files_desc):
        """Sets the cloud_storage_files_desc of this DropDocumentReq.


        :param cloud_storage_files_desc: The cloud_storage_files_desc of this DropDocumentReq.  # noqa: E501
        :type: str
        """

        self._cloud_storage_files_desc = cloud_storage_files_desc

    @property
    def tenant_id(self):
        """Gets the tenant_id of this DropDocumentReq.  # noqa: E501


        :return: The tenant_id of this DropDocumentReq.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this DropDocumentReq.


        :param tenant_id: The tenant_id of this DropDocumentReq.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this DropDocumentReq.  # noqa: E501


        :return: The subscription_id of this DropDocumentReq.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this DropDocumentReq.


        :param subscription_id: The subscription_id of this DropDocumentReq.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def trace_id(self):
        """Gets the trace_id of this DropDocumentReq.  # noqa: E501


        :return: The trace_id of this DropDocumentReq.  # noqa: E501
        :rtype: str
        """
        return self._trace_id

    @trace_id.setter
    def trace_id(self, trace_id):
        """Sets the trace_id of this DropDocumentReq.


        :param trace_id: The trace_id of this DropDocumentReq.  # noqa: E501
        :type: str
        """

        self._trace_id = trace_id

    @property
    def request_id(self):
        """Gets the request_id of this DropDocumentReq.  # noqa: E501


        :return: The request_id of this DropDocumentReq.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this DropDocumentReq.


        :param request_id: The request_id of this DropDocumentReq.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def integration_setting(self):
        """Gets the integration_setting of this DropDocumentReq.  # noqa: E501


        :return: The integration_setting of this DropDocumentReq.  # noqa: E501
        :rtype: IntegrationSetting
        """
        return self._integration_setting

    @integration_setting.setter
    def integration_setting(self, integration_setting):
        """Sets the integration_setting of this DropDocumentReq.


        :param integration_setting: The integration_setting of this DropDocumentReq.  # noqa: E501
        :type: IntegrationSetting
        """

        self._integration_setting = integration_setting

    @property
    def job_id(self):
        """Gets the job_id of this DropDocumentReq.  # noqa: E501


        :return: The job_id of this DropDocumentReq.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this DropDocumentReq.


        :param job_id: The job_id of this DropDocumentReq.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def job_id_ext(self):
        """Gets the job_id_ext of this DropDocumentReq.  # noqa: E501


        :return: The job_id_ext of this DropDocumentReq.  # noqa: E501
        :rtype: str
        """
        return self._job_id_ext

    @job_id_ext.setter
    def job_id_ext(self, job_id_ext):
        """Sets the job_id_ext of this DropDocumentReq.


        :param job_id_ext: The job_id_ext of this DropDocumentReq.  # noqa: E501
        :type: str
        """

        self._job_id_ext = job_id_ext

    @property
    def documents(self):
        """Gets the documents of this DropDocumentReq.  # noqa: E501


        :return: The documents of this DropDocumentReq.  # noqa: E501
        :rtype: list[Pdf4meDocument]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this DropDocumentReq.


        :param documents: The documents of this DropDocumentReq.  # noqa: E501
        :type: list[Pdf4meDocument]
        """

        self._documents = documents

    @property
    def without_metadata(self):
        """Gets the without_metadata of this DropDocumentReq.  # noqa: E501


        :return: The without_metadata of this DropDocumentReq.  # noqa: E501
        :rtype: bool
        """
        return self._without_metadata

    @without_metadata.setter
    def without_metadata(self, without_metadata):
        """Sets the without_metadata of this DropDocumentReq.


        :param without_metadata: The without_metadata of this DropDocumentReq.  # noqa: E501
        :type: bool
        """

        self._without_metadata = without_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DropDocumentReq, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DropDocumentReq):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
