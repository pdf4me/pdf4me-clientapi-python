# coding: utf-8

"""
    Pdf4me

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MailingConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_print': 'bool',
        'archive': 'bool',
        'print_pool_name': 'str',
        'production_session': 'str'
    }

    attribute_map = {
        '_print': 'print',
        'archive': 'archive',
        'print_pool_name': 'printPoolName',
        'production_session': 'productionSession'
    }

    def __init__(self, _print=None, archive=None, print_pool_name=None, production_session=None):  # noqa: E501
        """MailingConfig - a model defined in Swagger"""  # noqa: E501

        self.__print = None
        self._archive = None
        self._print_pool_name = None
        self._production_session = None
        self.discriminator = None

        if _print is not None:
            self._print = _print
        if archive is not None:
            self.archive = archive
        if print_pool_name is not None:
            self.print_pool_name = print_pool_name
        if production_session is not None:
            self.production_session = production_session

    @property
    def _print(self):
        """Gets the _print of this MailingConfig.  # noqa: E501


        :return: The _print of this MailingConfig.  # noqa: E501
        :rtype: bool
        """
        return self.__print

    @_print.setter
    def _print(self, _print):
        """Sets the _print of this MailingConfig.


        :param _print: The _print of this MailingConfig.  # noqa: E501
        :type: bool
        """

        self.__print = _print

    @property
    def archive(self):
        """Gets the archive of this MailingConfig.  # noqa: E501


        :return: The archive of this MailingConfig.  # noqa: E501
        :rtype: bool
        """
        return self._archive

    @archive.setter
    def archive(self, archive):
        """Sets the archive of this MailingConfig.


        :param archive: The archive of this MailingConfig.  # noqa: E501
        :type: bool
        """

        self._archive = archive

    @property
    def print_pool_name(self):
        """Gets the print_pool_name of this MailingConfig.  # noqa: E501


        :return: The print_pool_name of this MailingConfig.  # noqa: E501
        :rtype: str
        """
        return self._print_pool_name

    @print_pool_name.setter
    def print_pool_name(self, print_pool_name):
        """Sets the print_pool_name of this MailingConfig.


        :param print_pool_name: The print_pool_name of this MailingConfig.  # noqa: E501
        :type: str
        """

        self._print_pool_name = print_pool_name

    @property
    def production_session(self):
        """Gets the production_session of this MailingConfig.  # noqa: E501


        :return: The production_session of this MailingConfig.  # noqa: E501
        :rtype: str
        """
        return self._production_session

    @production_session.setter
    def production_session(self, production_session):
        """Sets the production_session of this MailingConfig.


        :param production_session: The production_session of this MailingConfig.  # noqa: E501
        :type: str
        """

        self._production_session = production_session

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MailingConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MailingConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
