# coding: utf-8

"""
    Pdf4me

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PdfOutline(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'childs': 'list[PdfOutline]',
        'count': 'int',
        'level': 'int',
        'title': 'str',
        'bottom': 'float',
        'left': 'float',
        'page_no': 'int',
        'right': 'float',
        'top': 'float',
        'type': 'str',
        'zoom': 'float'
    }

    attribute_map = {
        'childs': 'childs',
        'count': 'count',
        'level': 'level',
        'title': 'title',
        'bottom': 'bottom',
        'left': 'left',
        'page_no': 'pageNo',
        'right': 'right',
        'top': 'top',
        'type': 'type',
        'zoom': 'zoom'
    }

    def __init__(self, childs=None, count=None, level=None, title=None, bottom=None, left=None, page_no=None, right=None, top=None, type=None, zoom=None):  # noqa: E501
        """PdfOutline - a model defined in Swagger"""  # noqa: E501

        self._childs = None
        self._count = None
        self._level = None
        self._title = None
        self._bottom = None
        self._left = None
        self._page_no = None
        self._right = None
        self._top = None
        self._type = None
        self._zoom = None
        self.discriminator = None

        if childs is not None:
            self.childs = childs
        if count is not None:
            self.count = count
        if level is not None:
            self.level = level
        if title is not None:
            self.title = title
        if bottom is not None:
            self.bottom = bottom
        if left is not None:
            self.left = left
        if page_no is not None:
            self.page_no = page_no
        if right is not None:
            self.right = right
        if top is not None:
            self.top = top
        if type is not None:
            self.type = type
        if zoom is not None:
            self.zoom = zoom

    @property
    def childs(self):
        """Gets the childs of this PdfOutline.  # noqa: E501


        :return: The childs of this PdfOutline.  # noqa: E501
        :rtype: list[PdfOutline]
        """
        return self._childs

    @childs.setter
    def childs(self, childs):
        """Sets the childs of this PdfOutline.


        :param childs: The childs of this PdfOutline.  # noqa: E501
        :type: list[PdfOutline]
        """

        self._childs = childs

    @property
    def count(self):
        """Gets the count of this PdfOutline.  # noqa: E501


        :return: The count of this PdfOutline.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this PdfOutline.


        :param count: The count of this PdfOutline.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def level(self):
        """Gets the level of this PdfOutline.  # noqa: E501


        :return: The level of this PdfOutline.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this PdfOutline.


        :param level: The level of this PdfOutline.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def title(self):
        """Gets the title of this PdfOutline.  # noqa: E501


        :return: The title of this PdfOutline.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PdfOutline.


        :param title: The title of this PdfOutline.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def bottom(self):
        """Gets the bottom of this PdfOutline.  # noqa: E501


        :return: The bottom of this PdfOutline.  # noqa: E501
        :rtype: float
        """
        return self._bottom

    @bottom.setter
    def bottom(self, bottom):
        """Sets the bottom of this PdfOutline.


        :param bottom: The bottom of this PdfOutline.  # noqa: E501
        :type: float
        """

        self._bottom = bottom

    @property
    def left(self):
        """Gets the left of this PdfOutline.  # noqa: E501


        :return: The left of this PdfOutline.  # noqa: E501
        :rtype: float
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this PdfOutline.


        :param left: The left of this PdfOutline.  # noqa: E501
        :type: float
        """

        self._left = left

    @property
    def page_no(self):
        """Gets the page_no of this PdfOutline.  # noqa: E501


        :return: The page_no of this PdfOutline.  # noqa: E501
        :rtype: int
        """
        return self._page_no

    @page_no.setter
    def page_no(self, page_no):
        """Sets the page_no of this PdfOutline.


        :param page_no: The page_no of this PdfOutline.  # noqa: E501
        :type: int
        """

        self._page_no = page_no

    @property
    def right(self):
        """Gets the right of this PdfOutline.  # noqa: E501


        :return: The right of this PdfOutline.  # noqa: E501
        :rtype: float
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this PdfOutline.


        :param right: The right of this PdfOutline.  # noqa: E501
        :type: float
        """

        self._right = right

    @property
    def top(self):
        """Gets the top of this PdfOutline.  # noqa: E501


        :return: The top of this PdfOutline.  # noqa: E501
        :rtype: float
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this PdfOutline.


        :param top: The top of this PdfOutline.  # noqa: E501
        :type: float
        """

        self._top = top

    @property
    def type(self):
        """Gets the type of this PdfOutline.  # noqa: E501


        :return: The type of this PdfOutline.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PdfOutline.


        :param type: The type of this PdfOutline.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def zoom(self):
        """Gets the zoom of this PdfOutline.  # noqa: E501


        :return: The zoom of this PdfOutline.  # noqa: E501
        :rtype: float
        """
        return self._zoom

    @zoom.setter
    def zoom(self, zoom):
        """Sets the zoom of this PdfOutline.


        :param zoom: The zoom of this PdfOutline.  # noqa: E501
        :type: float
        """

        self._zoom = zoom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdfOutline, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdfOutline):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
