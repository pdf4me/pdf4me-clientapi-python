# coding: utf-8

"""
    Pdf4me

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SwissQrCreatorAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billing_data': 'BillingData',
        'language_type': 'str',
        'seperator_line': 'str',
        'format_type': 'str',
        'swiss_qr_on_pdf_required': 'bool',
        'action_id': 'str'
    }

    attribute_map = {
        'billing_data': 'billingData',
        'language_type': 'languageType',
        'seperator_line': 'seperatorLine',
        'format_type': 'formatType',
        'swiss_qr_on_pdf_required': 'swissQrOnPdfRequired',
        'action_id': 'actionId'
    }

    def __init__(self, billing_data=None, language_type=None, seperator_line=None, format_type=None, swiss_qr_on_pdf_required=None, action_id=None):  # noqa: E501
        """SwissQrCreatorAction - a model defined in Swagger"""  # noqa: E501

        self._billing_data = None
        self._language_type = None
        self._seperator_line = None
        self._format_type = None
        self._swiss_qr_on_pdf_required = None
        self._action_id = None
        self.discriminator = None

        if billing_data is not None:
            self.billing_data = billing_data
        if language_type is not None:
            self.language_type = language_type
        if seperator_line is not None:
            self.seperator_line = seperator_line
        if format_type is not None:
            self.format_type = format_type
        if swiss_qr_on_pdf_required is not None:
            self.swiss_qr_on_pdf_required = swiss_qr_on_pdf_required
        if action_id is not None:
            self.action_id = action_id

    @property
    def billing_data(self):
        """Gets the billing_data of this SwissQrCreatorAction.  # noqa: E501


        :return: The billing_data of this SwissQrCreatorAction.  # noqa: E501
        :rtype: BillingData
        """
        return self._billing_data

    @billing_data.setter
    def billing_data(self, billing_data):
        """Sets the billing_data of this SwissQrCreatorAction.


        :param billing_data: The billing_data of this SwissQrCreatorAction.  # noqa: E501
        :type: BillingData
        """

        self._billing_data = billing_data

    @property
    def language_type(self):
        """Gets the language_type of this SwissQrCreatorAction.  # noqa: E501


        :return: The language_type of this SwissQrCreatorAction.  # noqa: E501
        :rtype: str
        """
        return self._language_type

    @language_type.setter
    def language_type(self, language_type):
        """Sets the language_type of this SwissQrCreatorAction.


        :param language_type: The language_type of this SwissQrCreatorAction.  # noqa: E501
        :type: str
        """
        allowed_values = ["german", "french", "italian", "english"]  # noqa: E501
        if language_type not in allowed_values:
            raise ValueError(
                "Invalid value for `language_type` ({0}), must be one of {1}"  # noqa: E501
                .format(language_type, allowed_values)
            )

        self._language_type = language_type

    @property
    def seperator_line(self):
        """Gets the seperator_line of this SwissQrCreatorAction.  # noqa: E501


        :return: The seperator_line of this SwissQrCreatorAction.  # noqa: E501
        :rtype: str
        """
        return self._seperator_line

    @seperator_line.setter
    def seperator_line(self, seperator_line):
        """Sets the seperator_line of this SwissQrCreatorAction.


        :param seperator_line: The seperator_line of this SwissQrCreatorAction.  # noqa: E501
        :type: str
        """
        allowed_values = ["lineWithScissor", "line", "none"]  # noqa: E501
        if seperator_line not in allowed_values:
            raise ValueError(
                "Invalid value for `seperator_line` ({0}), must be one of {1}"  # noqa: E501
                .format(seperator_line, allowed_values)
            )

        self._seperator_line = seperator_line

    @property
    def format_type(self):
        """Gets the format_type of this SwissQrCreatorAction.  # noqa: E501


        :return: The format_type of this SwissQrCreatorAction.  # noqa: E501
        :rtype: str
        """
        return self._format_type

    @format_type.setter
    def format_type(self, format_type):
        """Sets the format_type of this SwissQrCreatorAction.


        :param format_type: The format_type of this SwissQrCreatorAction.  # noqa: E501
        :type: str
        """
        allowed_values = ["tiff", "pDF", "sVG", "pNG", "jPEG"]  # noqa: E501
        if format_type not in allowed_values:
            raise ValueError(
                "Invalid value for `format_type` ({0}), must be one of {1}"  # noqa: E501
                .format(format_type, allowed_values)
            )

        self._format_type = format_type

    @property
    def swiss_qr_on_pdf_required(self):
        """Gets the swiss_qr_on_pdf_required of this SwissQrCreatorAction.  # noqa: E501


        :return: The swiss_qr_on_pdf_required of this SwissQrCreatorAction.  # noqa: E501
        :rtype: bool
        """
        return self._swiss_qr_on_pdf_required

    @swiss_qr_on_pdf_required.setter
    def swiss_qr_on_pdf_required(self, swiss_qr_on_pdf_required):
        """Sets the swiss_qr_on_pdf_required of this SwissQrCreatorAction.


        :param swiss_qr_on_pdf_required: The swiss_qr_on_pdf_required of this SwissQrCreatorAction.  # noqa: E501
        :type: bool
        """

        self._swiss_qr_on_pdf_required = swiss_qr_on_pdf_required

    @property
    def action_id(self):
        """Gets the action_id of this SwissQrCreatorAction.  # noqa: E501


        :return: The action_id of this SwissQrCreatorAction.  # noqa: E501
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this SwissQrCreatorAction.


        :param action_id: The action_id of this SwissQrCreatorAction.  # noqa: E501
        :type: str
        """

        self._action_id = action_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SwissQrCreatorAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SwissQrCreatorAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
