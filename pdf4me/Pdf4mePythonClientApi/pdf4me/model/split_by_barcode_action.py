# coding: utf-8

"""
    Pdf4me

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SplitByBarcodeAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'barcode_string': 'str',
        'barcode_filter': 'str',
        'barcode_type': 'str',
        'split_barcode_page': 'str',
        'action_id': 'str'
    }

    attribute_map = {
        'barcode_string': 'barcodeString',
        'barcode_filter': 'barcodeFilter',
        'barcode_type': 'barcodeType',
        'split_barcode_page': 'splitBarcodePage',
        'action_id': 'actionId'
    }

    def __init__(self, barcode_string=None, barcode_filter=None, barcode_type=None, split_barcode_page=None, action_id=None):  # noqa: E501
        """SplitByBarcodeAction - a model defined in Swagger"""  # noqa: E501

        self._barcode_string = None
        self._barcode_filter = None
        self._barcode_type = None
        self._split_barcode_page = None
        self._action_id = None
        self.discriminator = None

        if barcode_string is not None:
            self.barcode_string = barcode_string
        if barcode_filter is not None:
            self.barcode_filter = barcode_filter
        if barcode_type is not None:
            self.barcode_type = barcode_type
        if split_barcode_page is not None:
            self.split_barcode_page = split_barcode_page
        if action_id is not None:
            self.action_id = action_id

    @property
    def barcode_string(self):
        """Gets the barcode_string of this SplitByBarcodeAction.  # noqa: E501


        :return: The barcode_string of this SplitByBarcodeAction.  # noqa: E501
        :rtype: str
        """
        return self._barcode_string

    @barcode_string.setter
    def barcode_string(self, barcode_string):
        """Sets the barcode_string of this SplitByBarcodeAction.


        :param barcode_string: The barcode_string of this SplitByBarcodeAction.  # noqa: E501
        :type: str
        """

        self._barcode_string = barcode_string

    @property
    def barcode_filter(self):
        """Gets the barcode_filter of this SplitByBarcodeAction.  # noqa: E501


        :return: The barcode_filter of this SplitByBarcodeAction.  # noqa: E501
        :rtype: str
        """
        return self._barcode_filter

    @barcode_filter.setter
    def barcode_filter(self, barcode_filter):
        """Sets the barcode_filter of this SplitByBarcodeAction.


        :param barcode_filter: The barcode_filter of this SplitByBarcodeAction.  # noqa: E501
        :type: str
        """
        allowed_values = ["startsWith", "endsWith", "contains", "exact"]  # noqa: E501
        if barcode_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `barcode_filter` ({0}), must be one of {1}"  # noqa: E501
                .format(barcode_filter, allowed_values)
            )

        self._barcode_filter = barcode_filter

    @property
    def barcode_type(self):
        """Gets the barcode_type of this SplitByBarcodeAction.  # noqa: E501


        :return: The barcode_type of this SplitByBarcodeAction.  # noqa: E501
        :rtype: str
        """
        return self._barcode_type

    @barcode_type.setter
    def barcode_type(self, barcode_type):
        """Sets the barcode_type of this SplitByBarcodeAction.


        :param barcode_type: The barcode_type of this SplitByBarcodeAction.  # noqa: E501
        :type: str
        """
        allowed_values = ["any", "datamatrix", "qrcode"]  # noqa: E501
        if barcode_type not in allowed_values:
            raise ValueError(
                "Invalid value for `barcode_type` ({0}), must be one of {1}"  # noqa: E501
                .format(barcode_type, allowed_values)
            )

        self._barcode_type = barcode_type

    @property
    def split_barcode_page(self):
        """Gets the split_barcode_page of this SplitByBarcodeAction.  # noqa: E501


        :return: The split_barcode_page of this SplitByBarcodeAction.  # noqa: E501
        :rtype: str
        """
        return self._split_barcode_page

    @split_barcode_page.setter
    def split_barcode_page(self, split_barcode_page):
        """Sets the split_barcode_page of this SplitByBarcodeAction.


        :param split_barcode_page: The split_barcode_page of this SplitByBarcodeAction.  # noqa: E501
        :type: str
        """
        allowed_values = ["before", "after", "remove"]  # noqa: E501
        if split_barcode_page not in allowed_values:
            raise ValueError(
                "Invalid value for `split_barcode_page` ({0}), must be one of {1}"  # noqa: E501
                .format(split_barcode_page, allowed_values)
            )

        self._split_barcode_page = split_barcode_page

    @property
    def action_id(self):
        """Gets the action_id of this SplitByBarcodeAction.  # noqa: E501


        :return: The action_id of this SplitByBarcodeAction.  # noqa: E501
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this SplitByBarcodeAction.


        :param action_id: The action_id of this SplitByBarcodeAction.  # noqa: E501
        :type: str
        """

        self._action_id = action_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SplitByBarcodeAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SplitByBarcodeAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
