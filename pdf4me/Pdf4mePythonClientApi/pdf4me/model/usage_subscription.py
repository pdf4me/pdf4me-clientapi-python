# coding: utf-8

"""
    Pdf4me

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UsageSubscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'subscription_id': 'str',
        'sub_cost_total': 'int',
        'sub_cost_current': 'int',
        'api_cost_total': 'int',
        'api_cost_current': 'int',
        'feature': 'str',
        'feature_call_cnt': 'int',
        'duration_ms_avg': 'int',
        'duration_ms_min': 'int',
        'duration_ms_max': 'int',
        'pages_avg': 'int',
        'pages_min': 'int',
        'pages_max': 'int',
        'pages_sum': 'int',
        'doc_size_avg': 'int',
        'doc_size_min': 'int',
        'doc_size_max': 'int',
        'doc_size_sum': 'int',
        'time_stamp_from': 'datetime',
        'time_stamp_to': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'subscription_id': 'subscriptionId',
        'sub_cost_total': 'subCostTotal',
        'sub_cost_current': 'subCostCurrent',
        'api_cost_total': 'apiCostTotal',
        'api_cost_current': 'apiCostCurrent',
        'feature': 'feature',
        'feature_call_cnt': 'featureCallCnt',
        'duration_ms_avg': 'durationMsAvg',
        'duration_ms_min': 'durationMsMin',
        'duration_ms_max': 'durationMsMax',
        'pages_avg': 'pagesAvg',
        'pages_min': 'pagesMin',
        'pages_max': 'pagesMax',
        'pages_sum': 'pagesSum',
        'doc_size_avg': 'docSizeAvg',
        'doc_size_min': 'docSizeMin',
        'doc_size_max': 'docSizeMax',
        'doc_size_sum': 'docSizeSum',
        'time_stamp_from': 'timeStampFrom',
        'time_stamp_to': 'timeStampTo'
    }

    def __init__(self, id=None, subscription_id=None, sub_cost_total=None, sub_cost_current=None, api_cost_total=None, api_cost_current=None, feature=None, feature_call_cnt=None, duration_ms_avg=None, duration_ms_min=None, duration_ms_max=None, pages_avg=None, pages_min=None, pages_max=None, pages_sum=None, doc_size_avg=None, doc_size_min=None, doc_size_max=None, doc_size_sum=None, time_stamp_from=None, time_stamp_to=None):  # noqa: E501
        """UsageSubscription - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._subscription_id = None
        self._sub_cost_total = None
        self._sub_cost_current = None
        self._api_cost_total = None
        self._api_cost_current = None
        self._feature = None
        self._feature_call_cnt = None
        self._duration_ms_avg = None
        self._duration_ms_min = None
        self._duration_ms_max = None
        self._pages_avg = None
        self._pages_min = None
        self._pages_max = None
        self._pages_sum = None
        self._doc_size_avg = None
        self._doc_size_min = None
        self._doc_size_max = None
        self._doc_size_sum = None
        self._time_stamp_from = None
        self._time_stamp_to = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if sub_cost_total is not None:
            self.sub_cost_total = sub_cost_total
        if sub_cost_current is not None:
            self.sub_cost_current = sub_cost_current
        if api_cost_total is not None:
            self.api_cost_total = api_cost_total
        if api_cost_current is not None:
            self.api_cost_current = api_cost_current
        if feature is not None:
            self.feature = feature
        if feature_call_cnt is not None:
            self.feature_call_cnt = feature_call_cnt
        if duration_ms_avg is not None:
            self.duration_ms_avg = duration_ms_avg
        if duration_ms_min is not None:
            self.duration_ms_min = duration_ms_min
        if duration_ms_max is not None:
            self.duration_ms_max = duration_ms_max
        if pages_avg is not None:
            self.pages_avg = pages_avg
        if pages_min is not None:
            self.pages_min = pages_min
        if pages_max is not None:
            self.pages_max = pages_max
        if pages_sum is not None:
            self.pages_sum = pages_sum
        if doc_size_avg is not None:
            self.doc_size_avg = doc_size_avg
        if doc_size_min is not None:
            self.doc_size_min = doc_size_min
        if doc_size_max is not None:
            self.doc_size_max = doc_size_max
        if doc_size_sum is not None:
            self.doc_size_sum = doc_size_sum
        if time_stamp_from is not None:
            self.time_stamp_from = time_stamp_from
        if time_stamp_to is not None:
            self.time_stamp_to = time_stamp_to

    @property
    def id(self):
        """Gets the id of this UsageSubscription.  # noqa: E501


        :return: The id of this UsageSubscription.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UsageSubscription.


        :param id: The id of this UsageSubscription.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this UsageSubscription.  # noqa: E501


        :return: The subscription_id of this UsageSubscription.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this UsageSubscription.


        :param subscription_id: The subscription_id of this UsageSubscription.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def sub_cost_total(self):
        """Gets the sub_cost_total of this UsageSubscription.  # noqa: E501


        :return: The sub_cost_total of this UsageSubscription.  # noqa: E501
        :rtype: int
        """
        return self._sub_cost_total

    @sub_cost_total.setter
    def sub_cost_total(self, sub_cost_total):
        """Sets the sub_cost_total of this UsageSubscription.


        :param sub_cost_total: The sub_cost_total of this UsageSubscription.  # noqa: E501
        :type: int
        """

        self._sub_cost_total = sub_cost_total

    @property
    def sub_cost_current(self):
        """Gets the sub_cost_current of this UsageSubscription.  # noqa: E501


        :return: The sub_cost_current of this UsageSubscription.  # noqa: E501
        :rtype: int
        """
        return self._sub_cost_current

    @sub_cost_current.setter
    def sub_cost_current(self, sub_cost_current):
        """Sets the sub_cost_current of this UsageSubscription.


        :param sub_cost_current: The sub_cost_current of this UsageSubscription.  # noqa: E501
        :type: int
        """

        self._sub_cost_current = sub_cost_current

    @property
    def api_cost_total(self):
        """Gets the api_cost_total of this UsageSubscription.  # noqa: E501


        :return: The api_cost_total of this UsageSubscription.  # noqa: E501
        :rtype: int
        """
        return self._api_cost_total

    @api_cost_total.setter
    def api_cost_total(self, api_cost_total):
        """Sets the api_cost_total of this UsageSubscription.


        :param api_cost_total: The api_cost_total of this UsageSubscription.  # noqa: E501
        :type: int
        """

        self._api_cost_total = api_cost_total

    @property
    def api_cost_current(self):
        """Gets the api_cost_current of this UsageSubscription.  # noqa: E501


        :return: The api_cost_current of this UsageSubscription.  # noqa: E501
        :rtype: int
        """
        return self._api_cost_current

    @api_cost_current.setter
    def api_cost_current(self, api_cost_current):
        """Sets the api_cost_current of this UsageSubscription.


        :param api_cost_current: The api_cost_current of this UsageSubscription.  # noqa: E501
        :type: int
        """

        self._api_cost_current = api_cost_current

    @property
    def feature(self):
        """Gets the feature of this UsageSubscription.  # noqa: E501


        :return: The feature of this UsageSubscription.  # noqa: E501
        :rtype: str
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """Sets the feature of this UsageSubscription.


        :param feature: The feature of this UsageSubscription.  # noqa: E501
        :type: str
        """

        self._feature = feature

    @property
    def feature_call_cnt(self):
        """Gets the feature_call_cnt of this UsageSubscription.  # noqa: E501


        :return: The feature_call_cnt of this UsageSubscription.  # noqa: E501
        :rtype: int
        """
        return self._feature_call_cnt

    @feature_call_cnt.setter
    def feature_call_cnt(self, feature_call_cnt):
        """Sets the feature_call_cnt of this UsageSubscription.


        :param feature_call_cnt: The feature_call_cnt of this UsageSubscription.  # noqa: E501
        :type: int
        """

        self._feature_call_cnt = feature_call_cnt

    @property
    def duration_ms_avg(self):
        """Gets the duration_ms_avg of this UsageSubscription.  # noqa: E501


        :return: The duration_ms_avg of this UsageSubscription.  # noqa: E501
        :rtype: int
        """
        return self._duration_ms_avg

    @duration_ms_avg.setter
    def duration_ms_avg(self, duration_ms_avg):
        """Sets the duration_ms_avg of this UsageSubscription.


        :param duration_ms_avg: The duration_ms_avg of this UsageSubscription.  # noqa: E501
        :type: int
        """

        self._duration_ms_avg = duration_ms_avg

    @property
    def duration_ms_min(self):
        """Gets the duration_ms_min of this UsageSubscription.  # noqa: E501


        :return: The duration_ms_min of this UsageSubscription.  # noqa: E501
        :rtype: int
        """
        return self._duration_ms_min

    @duration_ms_min.setter
    def duration_ms_min(self, duration_ms_min):
        """Sets the duration_ms_min of this UsageSubscription.


        :param duration_ms_min: The duration_ms_min of this UsageSubscription.  # noqa: E501
        :type: int
        """

        self._duration_ms_min = duration_ms_min

    @property
    def duration_ms_max(self):
        """Gets the duration_ms_max of this UsageSubscription.  # noqa: E501


        :return: The duration_ms_max of this UsageSubscription.  # noqa: E501
        :rtype: int
        """
        return self._duration_ms_max

    @duration_ms_max.setter
    def duration_ms_max(self, duration_ms_max):
        """Sets the duration_ms_max of this UsageSubscription.


        :param duration_ms_max: The duration_ms_max of this UsageSubscription.  # noqa: E501
        :type: int
        """

        self._duration_ms_max = duration_ms_max

    @property
    def pages_avg(self):
        """Gets the pages_avg of this UsageSubscription.  # noqa: E501


        :return: The pages_avg of this UsageSubscription.  # noqa: E501
        :rtype: int
        """
        return self._pages_avg

    @pages_avg.setter
    def pages_avg(self, pages_avg):
        """Sets the pages_avg of this UsageSubscription.


        :param pages_avg: The pages_avg of this UsageSubscription.  # noqa: E501
        :type: int
        """

        self._pages_avg = pages_avg

    @property
    def pages_min(self):
        """Gets the pages_min of this UsageSubscription.  # noqa: E501


        :return: The pages_min of this UsageSubscription.  # noqa: E501
        :rtype: int
        """
        return self._pages_min

    @pages_min.setter
    def pages_min(self, pages_min):
        """Sets the pages_min of this UsageSubscription.


        :param pages_min: The pages_min of this UsageSubscription.  # noqa: E501
        :type: int
        """

        self._pages_min = pages_min

    @property
    def pages_max(self):
        """Gets the pages_max of this UsageSubscription.  # noqa: E501


        :return: The pages_max of this UsageSubscription.  # noqa: E501
        :rtype: int
        """
        return self._pages_max

    @pages_max.setter
    def pages_max(self, pages_max):
        """Sets the pages_max of this UsageSubscription.


        :param pages_max: The pages_max of this UsageSubscription.  # noqa: E501
        :type: int
        """

        self._pages_max = pages_max

    @property
    def pages_sum(self):
        """Gets the pages_sum of this UsageSubscription.  # noqa: E501


        :return: The pages_sum of this UsageSubscription.  # noqa: E501
        :rtype: int
        """
        return self._pages_sum

    @pages_sum.setter
    def pages_sum(self, pages_sum):
        """Sets the pages_sum of this UsageSubscription.


        :param pages_sum: The pages_sum of this UsageSubscription.  # noqa: E501
        :type: int
        """

        self._pages_sum = pages_sum

    @property
    def doc_size_avg(self):
        """Gets the doc_size_avg of this UsageSubscription.  # noqa: E501


        :return: The doc_size_avg of this UsageSubscription.  # noqa: E501
        :rtype: int
        """
        return self._doc_size_avg

    @doc_size_avg.setter
    def doc_size_avg(self, doc_size_avg):
        """Sets the doc_size_avg of this UsageSubscription.


        :param doc_size_avg: The doc_size_avg of this UsageSubscription.  # noqa: E501
        :type: int
        """

        self._doc_size_avg = doc_size_avg

    @property
    def doc_size_min(self):
        """Gets the doc_size_min of this UsageSubscription.  # noqa: E501


        :return: The doc_size_min of this UsageSubscription.  # noqa: E501
        :rtype: int
        """
        return self._doc_size_min

    @doc_size_min.setter
    def doc_size_min(self, doc_size_min):
        """Sets the doc_size_min of this UsageSubscription.


        :param doc_size_min: The doc_size_min of this UsageSubscription.  # noqa: E501
        :type: int
        """

        self._doc_size_min = doc_size_min

    @property
    def doc_size_max(self):
        """Gets the doc_size_max of this UsageSubscription.  # noqa: E501


        :return: The doc_size_max of this UsageSubscription.  # noqa: E501
        :rtype: int
        """
        return self._doc_size_max

    @doc_size_max.setter
    def doc_size_max(self, doc_size_max):
        """Sets the doc_size_max of this UsageSubscription.


        :param doc_size_max: The doc_size_max of this UsageSubscription.  # noqa: E501
        :type: int
        """

        self._doc_size_max = doc_size_max

    @property
    def doc_size_sum(self):
        """Gets the doc_size_sum of this UsageSubscription.  # noqa: E501


        :return: The doc_size_sum of this UsageSubscription.  # noqa: E501
        :rtype: int
        """
        return self._doc_size_sum

    @doc_size_sum.setter
    def doc_size_sum(self, doc_size_sum):
        """Sets the doc_size_sum of this UsageSubscription.


        :param doc_size_sum: The doc_size_sum of this UsageSubscription.  # noqa: E501
        :type: int
        """

        self._doc_size_sum = doc_size_sum

    @property
    def time_stamp_from(self):
        """Gets the time_stamp_from of this UsageSubscription.  # noqa: E501


        :return: The time_stamp_from of this UsageSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._time_stamp_from

    @time_stamp_from.setter
    def time_stamp_from(self, time_stamp_from):
        """Sets the time_stamp_from of this UsageSubscription.


        :param time_stamp_from: The time_stamp_from of this UsageSubscription.  # noqa: E501
        :type: datetime
        """

        self._time_stamp_from = time_stamp_from

    @property
    def time_stamp_to(self):
        """Gets the time_stamp_to of this UsageSubscription.  # noqa: E501


        :return: The time_stamp_to of this UsageSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._time_stamp_to

    @time_stamp_to.setter
    def time_stamp_to(self, time_stamp_to):
        """Sets the time_stamp_to of this UsageSubscription.


        :param time_stamp_to: The time_stamp_to of this UsageSubscription.  # noqa: E501
        :type: datetime
        """

        self._time_stamp_to = time_stamp_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsageSubscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsageSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
