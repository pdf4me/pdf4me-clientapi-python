# coding: utf-8

"""
    Pdf4me

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PdfResources(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'doc_metadata': 'DocMetadata',
        'outlines': 'list[PdfOutline]',
        'xmp_metadata': 'str',
        'images': 'list[Document]',
        'text': 'list[Document]'
    }

    attribute_map = {
        'doc_metadata': 'DocMetadata',
        'outlines': 'outlines',
        'xmp_metadata': 'xmpMetadata',
        'images': 'images',
        'text': 'text'
    }

    def __init__(self, doc_metadata=None, outlines=None, xmp_metadata=None, images=None, text=None):  # noqa: E501
        """PdfResources - a model defined in Swagger"""  # noqa: E501

        self._doc_metadata = None
        self._outlines = None
        self._xmp_metadata = None
        self._images = None
        self._text = None
        self.discriminator = None

        if doc_metadata is not None:
            self.doc_metadata = doc_metadata
        if outlines is not None:
            self.outlines = outlines
        if xmp_metadata is not None:
            self.xmp_metadata = xmp_metadata
        if images is not None:
            self.images = images
        if text is not None:
            self.text = text

    @property
    def doc_metadata(self):
        """Gets the doc_metadata of this PdfResources.  # noqa: E501


        :return: The doc_metadata of this PdfResources.  # noqa: E501
        :rtype: DocMetadata
        """
        return self._doc_metadata

    @doc_metadata.setter
    def doc_metadata(self, doc_metadata):
        """Sets the doc_metadata of this PdfResources.


        :param doc_metadata: The doc_metadata of this PdfResources.  # noqa: E501
        :type: DocMetadata
        """

        self._doc_metadata = doc_metadata

    @property
    def outlines(self):
        """Gets the outlines of this PdfResources.  # noqa: E501


        :return: The outlines of this PdfResources.  # noqa: E501
        :rtype: list[PdfOutline]
        """
        return self._outlines

    @outlines.setter
    def outlines(self, outlines):
        """Sets the outlines of this PdfResources.


        :param outlines: The outlines of this PdfResources.  # noqa: E501
        :type: list[PdfOutline]
        """

        self._outlines = outlines

    @property
    def xmp_metadata(self):
        """Gets the xmp_metadata of this PdfResources.  # noqa: E501


        :return: The xmp_metadata of this PdfResources.  # noqa: E501
        :rtype: str
        """
        return self._xmp_metadata

    @xmp_metadata.setter
    def xmp_metadata(self, xmp_metadata):
        """Sets the xmp_metadata of this PdfResources.


        :param xmp_metadata: The xmp_metadata of this PdfResources.  # noqa: E501
        :type: str
        """

        self._xmp_metadata = xmp_metadata

    @property
    def images(self):
        """Gets the images of this PdfResources.  # noqa: E501


        :return: The images of this PdfResources.  # noqa: E501
        :rtype: list[Document]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this PdfResources.


        :param images: The images of this PdfResources.  # noqa: E501
        :type: list[Document]
        """

        self._images = images

    @property
    def text(self):
        """Gets the text of this PdfResources.  # noqa: E501


        :return: The text of this PdfResources.  # noqa: E501
        :rtype: list[Document]
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this PdfResources.


        :param text: The text of this PdfResources.  # noqa: E501
        :type: list[Document]
        """

        self._text = text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdfResources, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdfResources):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
