# coding: utf-8

"""
    Pdf4me

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExtractAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'extract_pages': 'list[int]',
        'delete_selected_pages': 'bool',
        'action_id': 'str'
    }

    attribute_map = {
        'extract_pages': 'extractPages',
        'delete_selected_pages': 'deleteSelectedPages',
        'action_id': 'actionId'
    }

    def __init__(self, extract_pages=None, delete_selected_pages=None, action_id=None):  # noqa: E501
        """ExtractAction - a model defined in Swagger"""  # noqa: E501

        self._extract_pages = None
        self._delete_selected_pages = None
        self._action_id = None
        self.discriminator = None

        self.extract_pages = extract_pages
        if delete_selected_pages is not None:
            self.delete_selected_pages = delete_selected_pages
        if action_id is not None:
            self.action_id = action_id

    @property
    def extract_pages(self):
        """Gets the extract_pages of this ExtractAction.  # noqa: E501


        :return: The extract_pages of this ExtractAction.  # noqa: E501
        :rtype: list[int]
        """
        return self._extract_pages

    @extract_pages.setter
    def extract_pages(self, extract_pages):
        """Sets the extract_pages of this ExtractAction.


        :param extract_pages: The extract_pages of this ExtractAction.  # noqa: E501
        :type: list[int]
        """
        # if extract_pages is None:
        #     raise ValueError("Invalid value for `extract_pages`, must not be `None`")  # noqa: E501

        self._extract_pages = extract_pages

    @property
    def delete_selected_pages(self):
        """Gets the delete_selected_pages of this ExtractAction.  # noqa: E501


        :return: The delete_selected_pages of this ExtractAction.  # noqa: E501
        :rtype: bool
        """
        return self._delete_selected_pages

    @delete_selected_pages.setter
    def delete_selected_pages(self, delete_selected_pages):
        """Sets the delete_selected_pages of this ExtractAction.


        :param delete_selected_pages: The delete_selected_pages of this ExtractAction.  # noqa: E501
        :type: bool
        """

        self._delete_selected_pages = delete_selected_pages

    @property
    def action_id(self):
        """Gets the action_id of this ExtractAction.  # noqa: E501


        :return: The action_id of this ExtractAction.  # noqa: E501
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this ExtractAction.


        :param action_id: The action_id of this ExtractAction.  # noqa: E501
        :type: str
        """

        self._action_id = action_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtractAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtractAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
