# coding: utf-8

"""
    Pdf4me

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExtractResourcesAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'extract_fonts': 'bool',
        'extract_images': 'bool',
        'list_fonts': 'bool',
        'list_images': 'bool',
        'outlines': 'bool',
        'xmp_metadata': 'bool',
        'extract_text': 'bool',
        'action_id': 'str'
    }

    attribute_map = {
        'extract_fonts': 'extractFonts',
        'extract_images': 'extractImages',
        'list_fonts': 'listFonts',
        'list_images': 'listImages',
        'outlines': 'outlines',
        'xmp_metadata': 'xmpMetadata',
        'extract_text': 'extractText',
        'action_id': 'actionId'
    }

    def __init__(self, extract_fonts=None, extract_images=None, list_fonts=None, list_images=None, outlines=None, xmp_metadata=None, extract_text=None, action_id=None):  # noqa: E501
        """ExtractResourcesAction - a model defined in Swagger"""  # noqa: E501

        self._extract_fonts = None
        self._extract_images = None
        self._list_fonts = None
        self._list_images = None
        self._outlines = None
        self._xmp_metadata = None
        self._extract_text = None
        self._action_id = None
        self.discriminator = None

        if extract_fonts is not None:
            self.extract_fonts = extract_fonts
        if extract_images is not None:
            self.extract_images = extract_images
        if list_fonts is not None:
            self.list_fonts = list_fonts
        if list_images is not None:
            self.list_images = list_images
        if outlines is not None:
            self.outlines = outlines
        if xmp_metadata is not None:
            self.xmp_metadata = xmp_metadata
        if extract_text is not None:
            self.extract_text = extract_text
        if action_id is not None:
            self.action_id = action_id

    @property
    def extract_fonts(self):
        """Gets the extract_fonts of this ExtractResourcesAction.  # noqa: E501

         Get or set whether to extract embedded fonts. Depending on the font type, the extracted font has one of the   following three formats: fnt‹objno›.ttf or fnt‹objno›.pfb or fnt‹objno›.cff, where ‹objno› is the  number of the PDF object of the font.   {default:  false}  # noqa: E501

        :return: The extract_fonts of this ExtractResourcesAction.  # noqa: E501
        :rtype: bool
        """
        return self._extract_fonts

    @extract_fonts.setter
    def extract_fonts(self, extract_fonts):
        """Sets the extract_fonts of this ExtractResourcesAction.

         Get or set whether to extract embedded fonts. Depending on the font type, the extracted font has one of the   following three formats: fnt‹objno›.ttf or fnt‹objno›.pfb or fnt‹objno›.cff, where ‹objno› is the  number of the PDF object of the font.   {default:  false}  # noqa: E501

        :param extract_fonts: The extract_fonts of this ExtractResourcesAction.  # noqa: E501
        :type: bool
        """

        self._extract_fonts = extract_fonts

    @property
    def extract_images(self):
        """Gets the extract_images of this ExtractResourcesAction.  # noqa: E501

        Get or set whether to extract images.Depending on the compression, the extracted image has one of the following  formats: img‹objno›.tif or img‹objno›.jpg, where objno is the number of the PDF object of the image.  {default:  false}  # noqa: E501

        :return: The extract_images of this ExtractResourcesAction.  # noqa: E501
        :rtype: bool
        """
        return self._extract_images

    @extract_images.setter
    def extract_images(self, extract_images):
        """Sets the extract_images of this ExtractResourcesAction.

        Get or set whether to extract images.Depending on the compression, the extracted image has one of the following  formats: img‹objno›.tif or img‹objno›.jpg, where objno is the number of the PDF object of the image.  {default:  false}  # noqa: E501

        :param extract_images: The extract_images of this ExtractResourcesAction.  # noqa: E501
        :type: bool
        """

        self._extract_images = extract_images

    @property
    def list_fonts(self):
        """Gets the list_fonts of this ExtractResourcesAction.  # noqa: E501

        List all fonts included in the document and write them as a list to a text file  {default:  false}  # noqa: E501

        :return: The list_fonts of this ExtractResourcesAction.  # noqa: E501
        :rtype: bool
        """
        return self._list_fonts

    @list_fonts.setter
    def list_fonts(self, list_fonts):
        """Sets the list_fonts of this ExtractResourcesAction.

        List all fonts included in the document and write them as a list to a text file  {default:  false}  # noqa: E501

        :param list_fonts: The list_fonts of this ExtractResourcesAction.  # noqa: E501
        :type: bool
        """

        self._list_fonts = list_fonts

    @property
    def list_images(self):
        """Gets the list_images of this ExtractResourcesAction.  # noqa: E501

        List all images included in the document and write them as a list to a text file.  {default:  false}  # noqa: E501

        :return: The list_images of this ExtractResourcesAction.  # noqa: E501
        :rtype: bool
        """
        return self._list_images

    @list_images.setter
    def list_images(self, list_images):
        """Sets the list_images of this ExtractResourcesAction.

        List all images included in the document and write them as a list to a text file.  {default:  false}  # noqa: E501

        :param list_images: The list_images of this ExtractResourcesAction.  # noqa: E501
        :type: bool
        """

        self._list_images = list_images

    @property
    def outlines(self):
        """Gets the outlines of this ExtractResourcesAction.  # noqa: E501


        :return: The outlines of this ExtractResourcesAction.  # noqa: E501
        :rtype: bool
        """
        return self._outlines

    @outlines.setter
    def outlines(self, outlines):
        """Sets the outlines of this ExtractResourcesAction.


        :param outlines: The outlines of this ExtractResourcesAction.  # noqa: E501
        :type: bool
        """

        self._outlines = outlines

    @property
    def xmp_metadata(self):
        """Gets the xmp_metadata of this ExtractResourcesAction.  # noqa: E501


        :return: The xmp_metadata of this ExtractResourcesAction.  # noqa: E501
        :rtype: bool
        """
        return self._xmp_metadata

    @xmp_metadata.setter
    def xmp_metadata(self, xmp_metadata):
        """Sets the xmp_metadata of this ExtractResourcesAction.


        :param xmp_metadata: The xmp_metadata of this ExtractResourcesAction.  # noqa: E501
        :type: bool
        """

        self._xmp_metadata = xmp_metadata

    @property
    def extract_text(self):
        """Gets the extract_text of this ExtractResourcesAction.  # noqa: E501


        :return: The extract_text of this ExtractResourcesAction.  # noqa: E501
        :rtype: bool
        """
        return self._extract_text

    @extract_text.setter
    def extract_text(self, extract_text):
        """Sets the extract_text of this ExtractResourcesAction.


        :param extract_text: The extract_text of this ExtractResourcesAction.  # noqa: E501
        :type: bool
        """

        self._extract_text = extract_text

    @property
    def action_id(self):
        """Gets the action_id of this ExtractResourcesAction.  # noqa: E501


        :return: The action_id of this ExtractResourcesAction.  # noqa: E501
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this ExtractResourcesAction.


        :param action_id: The action_id of this ExtractResourcesAction.  # noqa: E501
        :type: str
        """

        self._action_id = action_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtractResourcesAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtractResourcesAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
